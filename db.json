{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.css","path":"main.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.svg","path":"fonts/tooltip.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"304dc8c20967b8cb04796d746147bdee6706a50f","modified":1480853302000},{"_id":"themes/yilia/.DS_Store","hash":"aa725775a519fc6dd8210901a65f9ca845639b84","modified":1480853333000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1480826693000},{"_id":"themes/yilia/README.md","hash":"4751bbbfe4ea5f2acd3d864de893e19c5a3d6878","modified":1480826693000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1480826693000},{"_id":"themes/yilia/_config.yml","hash":"7eef7242a167abcfd7725688a31fe014296fcb15","modified":1480868873000},{"_id":"themes/yilia/package.json","hash":"2535ba634f8b4ea2ddceff2543907859fc54a443","modified":1480826693000},{"_id":"themes/yilia/webpack.config.js","hash":"447b7469d79be7cf86a28805e0ef56d6e98895e0","modified":1480826693000},{"_id":"source/_posts/centos7-pip-mariadb.md","hash":"93bbb3ad9f59f1557f000dabdfe44373911ab470","modified":1481275085000},{"_id":"source/_posts/dev_host.txt","hash":"eb6146ddce1344f0dbb01cb34b9eaa342bbb76f4","modified":1481271697000},{"_id":"source/_posts/event-sheduler设置.md","hash":"058cd3ddf58d2fd66597a43f553fb7bcd793d699","modified":1480915173000},{"_id":"source/_posts/logstash-fileter.md","hash":"331670d6020c941a20e52bc31f46e4c2b56b0efe","modified":1480988328000},{"_id":"source/_posts/git介绍.md","hash":"ac3ce2f1a1df108eadee50d36a0410c9189c6084","modified":1480900250000},{"_id":"source/_posts/hello-world.md","hash":"dfcb8f774781239155c3e160c35cd4e91a8c85e0","modified":1480941990000},{"_id":"source/_posts/nignx-ssl.md","hash":"b2ca95cabc15fcb92cd80dd8200cca7476ca066d","modified":1481079879000},{"_id":"source/_posts/rabbitmq-install.md","hash":"8ff2d8975fe4f50bdfca91e7bc7291ce42dba78f","modified":1482141228000},{"_id":"source/_posts/openresty.md","hash":"a04ff40b5285d8fb29c99b97a36f58d381304d38","modified":1481337807000},{"_id":"source/_posts/packetbeat.md","hash":"491f4b830e0e73a071c7ddc35a0d696882f12e66","modified":1481099097000},{"_id":"source/_posts/数据库迁移.md","hash":"bbe9be0f79f7201270ce8c727563c09f2d9e4cc2","modified":1480858951000},{"_id":"source/abount/index.md","hash":"7f3d877eff826a388e82a98f8abbe971921b1fca","modified":1480832202000},{"_id":"source/linux/index.md","hash":"b7b22ae3ec9f5a3d75a1c912f87505653e8976c1","modified":1480856810000},{"_id":"source/images/avatar.jpg","hash":"3bae4bc994ad2876ab6f76591374f5a6b6b7c6ae","modified":1480868681000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"ad270561ac1c4d5dbec9065c426c2f155a0f839f","modified":1480826786000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1480826693000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1480826693000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"7252b1b7b7431c8545b64324abb2ef053fd31077","modified":1480826786000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1480826658000},{"_id":"themes/yilia/.git/index","hash":"1bbf901c0b632a37815fe4453a7dd3926d445783","modified":1480826693000},{"_id":"themes/yilia/.git/packed-refs","hash":"08616c588602bf454832c64c4599eeed21918a72","modified":1480826693000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1480826693000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1480826693000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1480826693000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1480826693000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1480826693000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1480826693000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1480826693000},{"_id":"themes/yilia/layout/.DS_Store","hash":"cdf70a50112ae14cb8abdaa94e8c58f122473302","modified":1480853321000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1480826693000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1480826693000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1480826693000},{"_id":"themes/yilia/layout/layout.ejs","hash":"18bc94a020c6e74b0a7a29bc412670605e0c0873","modified":1480826693000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480826693000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480826693000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1480826693000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"5598a6b7523bd639b70f2101da9425f05dcf102d","modified":1480853333000},{"_id":"themes/yilia/source/main.css","hash":"cee78af2f34e5b8572aec058c8db4b6fdc88d6d5","modified":1480826693000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1480826658000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1480826658000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1480826658000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"6415efc96b1fa4e7d0d2dcc6d18912a9fd02de41","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/.DS_Store","hash":"8106fb04255c276320de88c041768ee1c0ffaefb","modified":1480853321000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"e4937bc233b2e3525e1d887900a1fda7e039f686","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"fd631cb5297c367d0869446570f7cd89e403c638","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"8058daccb8915e72f2d6c3cbf00d2ed03801c0da","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"d78993618051392103df1107c0da5abb81e2acac","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"641234a5f9166bf231b3a86937ae42d864721108","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"b7fe090445660c4278562827dc7773fe23390018","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c5b92f83828e41a891c6db1d3e63cd2e007034e0","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1480826693000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1480826693000},{"_id":"themes/yilia/source/fonts/iconfont.eot","hash":"bc7decf4e37c3df6bd81d617d951f83327faa742","modified":1480826693000},{"_id":"themes/yilia/source/fonts/iconfont.svg","hash":"d40ad7496d4117d192594b5a9a622c88a60292a9","modified":1480826693000},{"_id":"themes/yilia/source/fonts/iconfont.ttf","hash":"d1d9497f08d75c36af6b1a4e5ee7a82e912da18e","modified":1480826693000},{"_id":"themes/yilia/source/fonts/iconfont.woff","hash":"27523a9a8009e1599f6bb84e456d4b6506e62dd3","modified":1480826693000},{"_id":"themes/yilia/source/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1480826693000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1480826693000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1480826693000},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"ca09562e666dd10e5e4b6b721a52ea0098eff6e1","modified":1480826693000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1480826693000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"6e82eec485df32d6a32f602ca8728564193824e2","modified":1480826693000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1480826693000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1480826693000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"08c3e3d27a341b1874d4a9b64be49721c2a5bc16","modified":1480826693000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7c00f9102c9b102aa1370a346a0730e743351fbb","modified":1480826693000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"915f6ddc3cd4c736c572bf27eb3ef5455ce1b9b0","modified":1480826693000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1480826693000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1480826693000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"9ffd1bb579b67738c151a5ce88f16023de8204d2","modified":1480826693000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1480826693000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"2a261fa2e402909a866c648a5de8eb287da6fba9","modified":1480826693000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"5700d3e08484f2828d5353b48a393e6f5dbdacb5","modified":1480826693000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"4277e4b7e8fef5480d8e2b9574cbfdf59f0225c8","modified":1480826693000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"9fea828d17c937fdcdc14018032873de26d1f59d","modified":1480826693000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1480826693000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1480826693000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1480826693000},{"_id":"themes/yilia/source/main.js","hash":"9b65612638edd96ffed8d3e3819f7bae491be9ed","modified":1480826693000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"6e82e88caa483d9b17c4166a3dbdfbe84decba22","modified":1480826693000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"62552c34d0c6acf303d1e9aede4612cc22a9e453","modified":1480826693000},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"795b0d1ad5ff278933409a1ab7451483fe6ceae5","modified":1480826693000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1480826693000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"cf7583d7a3648ad36a909eed8a3e0c77d1be8f05","modified":1480826693000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"059b6799ee21e63d05162d7ed0e1935b6574f52a","modified":1480826693000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1480826693000},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"34066227ffb6151d31fe8cadbef53738a91cfcc7","modified":1480826693000},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"f18e33e99b1032b95a60b018960bed64235c1a29","modified":1480826693000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"8ca48b006591bbf6d75688637c14fd1b5bdd650f","modified":1480826693000},{"_id":"themes/yilia/source-src/js/jquery.lazyload.js","hash":"37961302284435b2677b7fd1e0c0f7624e226e4a","modified":1480826693000},{"_id":"themes/yilia/source-src/js/main.js","hash":"373c83477296dcbc41763d0f4e0cf4b32a290354","modified":1480826693000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d79f5f2d789e6cddfd7b502df238107e9c63aac","modified":1480826693000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1480826693000},{"_id":"themes/yilia/source-src/js/qrcode.js","hash":"97bc84e1d9cae958aba41c448a04f50c8920ce1e","modified":1480826693000},{"_id":"themes/yilia/source-src/js/tags.js","hash":"f259b3f808df3a8523a42978f922bb9eda76e0ee","modified":1480826693000},{"_id":"themes/yilia/source-src/js/share.js","hash":"2327a07e8441255cfcfe11720923a64a2bf9fbe2","modified":1480826693000},{"_id":"themes/yilia/source-src/js/tools.js","hash":"ed69771cd501770c2c303ae6ae695d2a9a187cdd","modified":1480826693000},{"_id":"themes/yilia/source-src/js/util.js","hash":"28c66c54cab81b2a6c8c393226f5bd30f369e1bb","modified":1480826693000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"f1c4c21f690024fcc13c088c431fa5fbba26cc91","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/.DS_Store","hash":"97629bba81c1baa483b01cfb321daf8330e112ed","modified":1480853333000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"838d43529282b91a60934bbd39f3f9f5dbefee98","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1480826693000},{"_id":"themes/yilia/.git/objects/pack/pack-fe95ccba99890f819e78e6b7865eb75d8100fb83.idx","hash":"2dc46aa39fb8ba87c89a77f47a897e9400b25e03","modified":1480826693000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"ad270561ac1c4d5dbec9065c426c2f155a0f839f","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"81724d70d70a6ca6c6a03f649faf2b563231ec15","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"b03a166dc0b9a7e161816901409d4b2861be82ed","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"3a44b657ebdeed1764d90f81b43e91e5a8f25c21","modified":1480826693000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1480826693000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1480826693000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1480826693000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"042b04e2b9e4de923dfae4649da054919a7ed370","modified":1480826693000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"6f44ec8ff32515280c0b7ea8ad7e4cb5f4dfcd84","modified":1480826693000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1480826693000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc7decf4e37c3df6bd81d617d951f83327faa742","modified":1480826693000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"d40ad7496d4117d192594b5a9a622c88a60292a9","modified":1480826693000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"27523a9a8009e1599f6bb84e456d4b6506e62dd3","modified":1480826693000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"d1d9497f08d75c36af6b1a4e5ee7a82e912da18e","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1480826693000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1480826693000},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1480826693000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"6415efc96b1fa4e7d0d2dcc6d18912a9fd02de41","modified":1480826693000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1480826693000},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1480826693000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"6415efc96b1fa4e7d0d2dcc6d18912a9fd02de41","modified":1480826693000},{"_id":"themes/yilia/.git/objects/pack/pack-fe95ccba99890f819e78e6b7865eb75d8100fb83.pack","hash":"07d407783d13a2762c50a133fdc0ac95f4ce0262","modified":1480826693000}],"Category":[{"name":"linux","_id":"ciwvxqd1e0004opulvvlzh50a"},{"name":"数据库","parent":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd22000kopulxliul360"},{"name":"linux,数据库,运维","_id":"ciwvxqd2a000topul2udutw5m"},{"name":"运维","parent":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2e0013opuln2dsf6vw"},{"name":"开发","parent":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2m0016opultngj4etz"}],"Data":[],"Page":[{"title":"abount","date":"2016-12-04T06:04:47.000Z","_content":"<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\">\n<div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\">\n<IMG alt=\"\" src=\"https://avatars1.githubusercontent.com/u/168751?v=3&s=140\" width=90 height=100>\n</div>\n<div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\">\n本文链接：<a href=\"<%= post.link %>\"><%= post.title %></a> <br/>\n作者： \n<a href=\"http://geespot.github.io/\">记事薄</a> <br/>出处： \n<a href=\"http://geespot.github.io/\">http://geespot.github.io/</a>\n<br/>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a>\n国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名 \n<a href=\"http://geespot.github.io/\">记事薄</a>及链接。\n</div>\n</div>\n","source":"abount/index.md","raw":"---\ntitle: abount\ndate: 2016-12-04 14:04:47\n---\n<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\">\n<div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\">\n<IMG alt=\"\" src=\"https://avatars1.githubusercontent.com/u/168751?v=3&s=140\" width=90 height=100>\n</div>\n<div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\">\n本文链接：<a href=\"<%= post.link %>\"><%= post.title %></a> <br/>\n作者： \n<a href=\"http://geespot.github.io/\">记事薄</a> <br/>出处： \n<a href=\"http://geespot.github.io/\">http://geespot.github.io/</a>\n<br/>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a>\n国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名 \n<a href=\"http://geespot.github.io/\">记事薄</a>及链接。\n</div>\n</div>\n","updated":"2016-12-04T06:16:42.000Z","path":"abount/index.html","comments":1,"layout":"page","_id":"ciwvxqd180001opulakk5qwvu","content":"<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\"><br><div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\"><br><img alt=\"\" src=\"https://avatars1.githubusercontent.com/u/168751?v=3&s=140\" width=\"90\" height=\"100\"><br></div><br><div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\"><br>本文链接：<a href=\"<%= post.link %>\">&lt;%= post.title %&gt;</a> <br><br>作者：<br><a href=\"http://geespot.github.io/\">记事薄</a> <br>出处：<br><a href=\"http://geespot.github.io/\">http://geespot.github.io/</a><br><br>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a><br>国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名<br><a href=\"http://geespot.github.io/\">记事薄</a>及链接。<br></div><br></div>\n","excerpt":"","more":"<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\"><br><div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\"><br><IMG alt=\"\" src=\"https://avatars1.githubusercontent.com/u/168751?v=3&s=140\" width=90 height=100><br></div><br><div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\"><br>本文链接：<a href=\"<%= post.link %>\">&lt;%= post.title %&gt;</a> <br/><br>作者：<br><a href=\"http://geespot.github.io/\">记事薄</a> <br/>出处：<br><a href=\"http://geespot.github.io/\">http://geespot.github.io/</a><br><br/>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a><br>国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名<br><a href=\"http://geespot.github.io/\">记事薄</a>及链接。<br></div><br></div>\n"},{"title":"linux","date":"2016-12-04T13:06:50.000Z","_content":"","source":"linux/index.md","raw":"---\ntitle: linux\ndate: 2016-12-04 21:06:50\n---\n","updated":"2016-12-04T13:06:50.000Z","path":"linux/index.html","comments":1,"layout":"page","_id":"ciwvxqd1d0003opuleup6qqcp","content":"","excerpt":"","more":""}],"Post":[{"title":"centos7_pip_mariadb","date":"2016-12-09T06:32:03.000Z","_content":"\n### centos7 yum安装maridb:\n```bash\n$  yum -y install mariadb*\n$  systemctl start mariadb.service\n$  systemctl enable mariadb.service\n```   \n\n### centos7 pip安装：\n```bash\n$  sudo yum -y install epel-release\n$  sudo yum -y install python-pip\n$  yum clean all\n```   \n\n###  firewall-cmd 端口 开启\n```bash\n$   firewall-cmd --zone=public --add-port=80/tcp --permanent\n$   firewall-cmd --zone=public --add-port=81/tcp --permanent\n$   firewall-cmd  --reload\n$   firewall-cmd --zone=public --list-ports\n```   \n\n### mysql数据库导出导入\n备份：\n```sql\nmysqldump  -h 127.0.0.1 -uroot -p --default-character-set=utf8 pycmdb > pycmdb.sql\n```   \n恢复：\n```sql\nmysql -uroot -p\nsource  pycmdb.sql\nTRUNCATE table assets_ip;\n```   \n\n###  PIL/Pillow IOError: decoder jpeg not available\n```bash\npip uninstall Pillow or pip uninstall PIL\nsudo yum install libjpeg-devel\npip install Pillow\n```   ","source":"_posts/centos7-pip-mariadb.md","raw":"---\ntitle: centos7_pip_mariadb\ndate: 2016-12-09 14:32:03\ntags:\n- 技术\n- 运维\ncategories: [linux,数据库,运维]\n---\n\n### centos7 yum安装maridb:\n```bash\n$  yum -y install mariadb*\n$  systemctl start mariadb.service\n$  systemctl enable mariadb.service\n```   \n\n### centos7 pip安装：\n```bash\n$  sudo yum -y install epel-release\n$  sudo yum -y install python-pip\n$  yum clean all\n```   \n\n###  firewall-cmd 端口 开启\n```bash\n$   firewall-cmd --zone=public --add-port=80/tcp --permanent\n$   firewall-cmd --zone=public --add-port=81/tcp --permanent\n$   firewall-cmd  --reload\n$   firewall-cmd --zone=public --list-ports\n```   \n\n### mysql数据库导出导入\n备份：\n```sql\nmysqldump  -h 127.0.0.1 -uroot -p --default-character-set=utf8 pycmdb > pycmdb.sql\n```   \n恢复：\n```sql\nmysql -uroot -p\nsource  pycmdb.sql\nTRUNCATE table assets_ip;\n```   \n\n###  PIL/Pillow IOError: decoder jpeg not available\n```bash\npip uninstall Pillow or pip uninstall PIL\nsudo yum install libjpeg-devel\npip install Pillow\n```   ","slug":"centos7-pip-mariadb","published":1,"updated":"2016-12-09T09:18:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd130000opulwfy257i8","content":"<h3 id=\"centos7-yum安装maridb\"><a href=\"#centos7-yum安装maridb\" class=\"headerlink\" title=\"centos7 yum安装maridb:\"></a>centos7 yum安装maridb:</h3><pre><code class=\"bash\">$  yum -y install mariadb*\n$  systemctl start mariadb.service\n$  systemctl <span class=\"built_in\">enable</span> mariadb.service\n</code></pre>\n<h3 id=\"centos7-pip安装：\"><a href=\"#centos7-pip安装：\" class=\"headerlink\" title=\"centos7 pip安装：\"></a>centos7 pip安装：</h3><pre><code class=\"bash\">$  sudo yum -y install epel-release\n$  sudo yum -y install python-pip\n$  yum clean all\n</code></pre>\n<h3 id=\"firewall-cmd-端口-开启\"><a href=\"#firewall-cmd-端口-开启\" class=\"headerlink\" title=\"firewall-cmd 端口 开启\"></a>firewall-cmd 端口 开启</h3><pre><code class=\"bash\">$   firewall-cmd --zone=public --add-port=80/tcp --permanent\n$   firewall-cmd --zone=public --add-port=81/tcp --permanent\n$   firewall-cmd  --reload\n$   firewall-cmd --zone=public --list-ports\n</code></pre>\n<h3 id=\"mysql数据库导出导入\"><a href=\"#mysql数据库导出导入\" class=\"headerlink\" title=\"mysql数据库导出导入\"></a>mysql数据库导出导入</h3><p>备份：</p>\n<pre><code class=\"sql\">mysqldump  -h 127.0.0.1 -uroot -p <span class=\"comment\">--default-character-set=utf8 pycmdb &gt; pycmdb.sql</span>\n</code></pre>\n<p>恢复：</p>\n<pre><code class=\"sql\">mysql -uroot -p\nsource  pycmdb.sql\n<span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">table</span> assets_ip;\n</code></pre>\n<h3 id=\"PIL-Pillow-IOError-decoder-jpeg-not-available\"><a href=\"#PIL-Pillow-IOError-decoder-jpeg-not-available\" class=\"headerlink\" title=\"PIL/Pillow IOError: decoder jpeg not available\"></a>PIL/Pillow IOError: decoder jpeg not available</h3><pre><code class=\"bash\">pip uninstall Pillow or pip uninstall PIL\nsudo yum install libjpeg-devel\npip install Pillow\n</code></pre>\n","excerpt":"","more":"<h3 id=\"centos7-yum安装maridb\"><a href=\"#centos7-yum安装maridb\" class=\"headerlink\" title=\"centos7 yum安装maridb:\"></a>centos7 yum安装maridb:</h3><pre><code class=\"bash\">$  yum -y install mariadb*\n$  systemctl start mariadb.service\n$  systemctl <span class=\"built_in\">enable</span> mariadb.service\n</code></pre>\n<h3 id=\"centos7-pip安装：\"><a href=\"#centos7-pip安装：\" class=\"headerlink\" title=\"centos7 pip安装：\"></a>centos7 pip安装：</h3><pre><code class=\"bash\">$  sudo yum -y install epel-release\n$  sudo yum -y install python-pip\n$  yum clean all\n</code></pre>\n<h3 id=\"firewall-cmd-端口-开启\"><a href=\"#firewall-cmd-端口-开启\" class=\"headerlink\" title=\"firewall-cmd 端口 开启\"></a>firewall-cmd 端口 开启</h3><pre><code class=\"bash\">$   firewall-cmd --zone=public --add-port=80/tcp --permanent\n$   firewall-cmd --zone=public --add-port=81/tcp --permanent\n$   firewall-cmd  --reload\n$   firewall-cmd --zone=public --list-ports\n</code></pre>\n<h3 id=\"mysql数据库导出导入\"><a href=\"#mysql数据库导出导入\" class=\"headerlink\" title=\"mysql数据库导出导入\"></a>mysql数据库导出导入</h3><p>备份：</p>\n<pre><code class=\"sql\">mysqldump  -h 127.0.0.1 -uroot -p <span class=\"comment\">--default-character-set=utf8 pycmdb &gt; pycmdb.sql</span>\n</code></pre>\n<p>恢复：</p>\n<pre><code class=\"sql\">mysql -uroot -p\nsource  pycmdb.sql\n<span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">table</span> assets_ip;\n</code></pre>\n<h3 id=\"PIL-Pillow-IOError-decoder-jpeg-not-available\"><a href=\"#PIL-Pillow-IOError-decoder-jpeg-not-available\" class=\"headerlink\" title=\"PIL/Pillow IOError: decoder jpeg not available\"></a>PIL/Pillow IOError: decoder jpeg not available</h3><pre><code class=\"bash\">pip uninstall Pillow or pip uninstall PIL\nsudo yum install libjpeg-devel\npip install Pillow\n</code></pre>\n"},{"title":"event_sheduler设置","date":"2016-12-05T02:34:45.000Z","_content":"\n##  关于event_scheduler的操作\n\n###  要查看当前是否已开启事件调度器，可执行如下SQL：\n\n```sql\n SHOW VARIABLES LIKE 'event_scheduler';\n SELECT @@event_scheduler;\n SHOW PROCESSLIST;\n```   \n\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| event_scheduler | OFF   |\n+-----------------+-------+\n\n###  启动方法：\n```sql\nSET GLOBAL event_scheduler = 1;\nSET GLOBAL event_scheduler = ON;\n```  \n或者  my.ini or my.cnf 中的\n[mysqld] 添加 \nevent_scheduler=ON\n\n* 创建事件(CREATE EVENT)\nCREATE EVENT [IF NOT EXISTS] event_name\nON SCHEDULE schedule\n[ON COMPLETION [NOT] PRESERVE]\n[ENABLE | DISABLE]\n[COMMENT 'comment']\nDO sql_statement;\n\n\nschedule:\nAT TIMESTAMP [+ INTERVAL INTERVAL]\n| EVERY INTERVAL [STARTS TIMESTAMP] [ENDS TIMESTAMP]\n\nINTERVAL:\nquantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n            WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n            DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n\n\n**使用方法** \n### 1)首先来看一个简单的例子来演示每秒插入一条记录到数据表:\n\n```sql\nUSE test;\nCREATE TABLE aaa (timeline TIMESTAMP);\nCREATE EVENT e_test_insert\nON SCHEDULE EVERY 1 SECOND \nDO INSERT INTO test.aaa VALUES (CURRENT_TIMESTAMP);\n```   \n等待3秒钟后，再执行查询成功。\n\n### 2) 5天后清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 5 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n### 3) 2007年7月20日12点整清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE AT TIMESTAMP '2007-07-20 12:00:00'\nDO TRUNCATE TABLE test.aaa;\n```   \n\n### 4) 每天定时清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n### 5) 5天后开启每天定时清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nSTARTS CURRENT_TIMESTAMP + INTERVAL 5 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n### 6) 每天定时清空test表，5天后停止执行：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nENDS CURRENT_TIMESTAMP + INTERVAL 5 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n\n### 7) 5天后开启每天定时清空test表，一个月后停止执行：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nSTARTS CURRENT_TIMESTAMP + INTERVAL 5 DAY\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nDO TRUNCATE TABLE test.aaa;\n[ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。\n```   \n### 8) 每天定时清空test表(只执行一次，任务完成后就终止该事件)：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nON COMPLETION NOT PRESERVE\nDO TRUNCATE TABLE test.aaa;\n```   \n[ENABLE | DISABLE]可是设置该事件创建后状态是否开启或关闭，默认为ENABLE。\n[COMMENT ‘comment’]可以给该事件加上注释。\n\n修改事件(ALTER EVENT)\nALTER EVENT event_name\n[ON SCHEDULE schedule]\n[RENAME TO new_event_name]\n[ON COMPLETION [NOT] PRESERVE]\n[COMMENT 'comment']\n[ENABLE | DISABLE]\n[DO sql_statement]\n1) 临时关闭事件\n```sql\nALTER EVENT e_test DISABLE;\n```   \n2) 开启事件\n```sql\nALTER EVENT e_test ENABLE;\n```   \n3) 将每天清空test表改为5天清空一次：\n\n```sql\nALTER EVENT e_test ON SCHEDULE EVERY 5 DAY;\n```   \n删除事件(DROP EVENT)\n语法很简单，如下所示：\n\nDROP EVENT [IF EXISTS] event_name\n例如删除前面创建的e_test事件\n\nDROP EVENT e_test;\n当然前提是这个事件存在，否则会产生ERROR 1513 (HY000): Unknown event错误，因此最好加上IF EXISTS\n\nDROP EVENT IF EXISTS e_test;\n\n","source":"_posts/event-sheduler设置.md","raw":"---\ntitle: event_sheduler设置\ndate: 2016-12-05 10:34:45\ntags:\n- 技术\ncategories: [linux,数据库,开发]\n---\n\n##  关于event_scheduler的操作\n\n###  要查看当前是否已开启事件调度器，可执行如下SQL：\n\n```sql\n SHOW VARIABLES LIKE 'event_scheduler';\n SELECT @@event_scheduler;\n SHOW PROCESSLIST;\n```   \n\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| event_scheduler | OFF   |\n+-----------------+-------+\n\n###  启动方法：\n```sql\nSET GLOBAL event_scheduler = 1;\nSET GLOBAL event_scheduler = ON;\n```  \n或者  my.ini or my.cnf 中的\n[mysqld] 添加 \nevent_scheduler=ON\n\n* 创建事件(CREATE EVENT)\nCREATE EVENT [IF NOT EXISTS] event_name\nON SCHEDULE schedule\n[ON COMPLETION [NOT] PRESERVE]\n[ENABLE | DISABLE]\n[COMMENT 'comment']\nDO sql_statement;\n\n\nschedule:\nAT TIMESTAMP [+ INTERVAL INTERVAL]\n| EVERY INTERVAL [STARTS TIMESTAMP] [ENDS TIMESTAMP]\n\nINTERVAL:\nquantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n            WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n            DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n\n\n**使用方法** \n### 1)首先来看一个简单的例子来演示每秒插入一条记录到数据表:\n\n```sql\nUSE test;\nCREATE TABLE aaa (timeline TIMESTAMP);\nCREATE EVENT e_test_insert\nON SCHEDULE EVERY 1 SECOND \nDO INSERT INTO test.aaa VALUES (CURRENT_TIMESTAMP);\n```   \n等待3秒钟后，再执行查询成功。\n\n### 2) 5天后清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 5 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n### 3) 2007年7月20日12点整清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE AT TIMESTAMP '2007-07-20 12:00:00'\nDO TRUNCATE TABLE test.aaa;\n```   \n\n### 4) 每天定时清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n### 5) 5天后开启每天定时清空test表：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nSTARTS CURRENT_TIMESTAMP + INTERVAL 5 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n### 6) 每天定时清空test表，5天后停止执行：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nENDS CURRENT_TIMESTAMP + INTERVAL 5 DAY\nDO TRUNCATE TABLE test.aaa;\n```   \n\n### 7) 5天后开启每天定时清空test表，一个月后停止执行：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nSTARTS CURRENT_TIMESTAMP + INTERVAL 5 DAY\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nDO TRUNCATE TABLE test.aaa;\n[ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。\n```   \n### 8) 每天定时清空test表(只执行一次，任务完成后就终止该事件)：\n```sql\nCREATE EVENT e_test\nON SCHEDULE EVERY 1 DAY\nON COMPLETION NOT PRESERVE\nDO TRUNCATE TABLE test.aaa;\n```   \n[ENABLE | DISABLE]可是设置该事件创建后状态是否开启或关闭，默认为ENABLE。\n[COMMENT ‘comment’]可以给该事件加上注释。\n\n修改事件(ALTER EVENT)\nALTER EVENT event_name\n[ON SCHEDULE schedule]\n[RENAME TO new_event_name]\n[ON COMPLETION [NOT] PRESERVE]\n[COMMENT 'comment']\n[ENABLE | DISABLE]\n[DO sql_statement]\n1) 临时关闭事件\n```sql\nALTER EVENT e_test DISABLE;\n```   \n2) 开启事件\n```sql\nALTER EVENT e_test ENABLE;\n```   \n3) 将每天清空test表改为5天清空一次：\n\n```sql\nALTER EVENT e_test ON SCHEDULE EVERY 5 DAY;\n```   \n删除事件(DROP EVENT)\n语法很简单，如下所示：\n\nDROP EVENT [IF EXISTS] event_name\n例如删除前面创建的e_test事件\n\nDROP EVENT e_test;\n当然前提是这个事件存在，否则会产生ERROR 1513 (HY000): Unknown event错误，因此最好加上IF EXISTS\n\nDROP EVENT IF EXISTS e_test;\n\n","slug":"event-sheduler设置","published":1,"updated":"2016-12-05T05:19:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1a0002opulgul8hxv4","content":"<h2 id=\"关于event-scheduler的操作\"><a href=\"#关于event-scheduler的操作\" class=\"headerlink\" title=\"关于event_scheduler的操作\"></a>关于event_scheduler的操作</h2><h3 id=\"要查看当前是否已开启事件调度器，可执行如下SQL：\"><a href=\"#要查看当前是否已开启事件调度器，可执行如下SQL：\" class=\"headerlink\" title=\"要查看当前是否已开启事件调度器，可执行如下SQL：\"></a>要查看当前是否已开启事件调度器，可执行如下SQL：</h3><pre><code class=\"sql\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">VARIABLES</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'event_scheduler'</span>;\n<span class=\"keyword\">SELECT</span> @@event_scheduler;\n<span class=\"keyword\">SHOW</span> <span class=\"keyword\">PROCESSLIST</span>;\n</code></pre>\n<p>+—————–+——-+<br>| Variable_name   | Value |<br>+—————–+——-+<br>| event_scheduler | OFF   |<br>+—————–+——-+</p>\n<h3 id=\"启动方法：\"><a href=\"#启动方法：\" class=\"headerlink\" title=\"启动方法：\"></a>启动方法：</h3><pre><code class=\"sql\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> event_scheduler = <span class=\"number\">1</span>;\n<span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> event_scheduler = <span class=\"keyword\">ON</span>;\n</code></pre>\n<p>或者  my.ini or my.cnf 中的<br>[mysqld] 添加<br>event_scheduler=ON</p>\n<ul>\n<li>创建事件(CREATE EVENT)<br>CREATE EVENT [IF NOT EXISTS] event_name<br>ON SCHEDULE schedule<br>[ON COMPLETION [NOT] PRESERVE]<br>[ENABLE | DISABLE]<br>[COMMENT ‘comment’]<br>DO sql_statement;</li>\n</ul>\n<p>schedule:<br>AT TIMESTAMP [+ INTERVAL INTERVAL]<br>| EVERY INTERVAL [STARTS TIMESTAMP] [ENDS TIMESTAMP]</p>\n<p>INTERVAL:<br>quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |<br>            WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |<br>            DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}</p>\n<p><strong>使用方法</strong> </p>\n<h3 id=\"1-首先来看一个简单的例子来演示每秒插入一条记录到数据表\"><a href=\"#1-首先来看一个简单的例子来演示每秒插入一条记录到数据表\" class=\"headerlink\" title=\"1)首先来看一个简单的例子来演示每秒插入一条记录到数据表:\"></a>1)首先来看一个简单的例子来演示每秒插入一条记录到数据表:</h3><pre><code class=\"sql\"><span class=\"keyword\">USE</span> <span class=\"keyword\">test</span>;\n<span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> aaa (timeline <span class=\"keyword\">TIMESTAMP</span>);\n<span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test_insert\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">SECOND</span> \n<span class=\"keyword\">DO</span> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.aaa <span class=\"keyword\">VALUES</span> (<span class=\"keyword\">CURRENT_TIMESTAMP</span>);\n</code></pre>\n<p>等待3秒钟后，再执行查询成功。</p>\n<h3 id=\"2-5天后清空test表：\"><a href=\"#2-5天后清空test表：\" class=\"headerlink\" title=\"2) 5天后清空test表：\"></a>2) 5天后清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE <span class=\"keyword\">AT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"3-2007年7月20日12点整清空test表：\"><a href=\"#3-2007年7月20日12点整清空test表：\" class=\"headerlink\" title=\"3) 2007年7月20日12点整清空test表：\"></a>3) 2007年7月20日12点整清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE <span class=\"keyword\">AT</span> <span class=\"keyword\">TIMESTAMP</span> <span class=\"string\">'2007-07-20 12:00:00'</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"4-每天定时清空test表：\"><a href=\"#4-每天定时清空test表：\" class=\"headerlink\" title=\"4) 每天定时清空test表：\"></a>4) 每天定时清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"5-5天后开启每天定时清空test表：\"><a href=\"#5-5天后开启每天定时清空test表：\" class=\"headerlink\" title=\"5) 5天后开启每天定时清空test表：\"></a>5) 5天后开启每天定时清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\nSTARTS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"6-每天定时清空test表，5天后停止执行：\"><a href=\"#6-每天定时清空test表，5天后停止执行：\" class=\"headerlink\" title=\"6) 每天定时清空test表，5天后停止执行：\"></a>6) 每天定时清空test表，5天后停止执行：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\nENDS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"7-5天后开启每天定时清空test表，一个月后停止执行：\"><a href=\"#7-5天后开启每天定时清空test表，一个月后停止执行：\" class=\"headerlink\" title=\"7) 5天后开启每天定时清空test表，一个月后停止执行：\"></a>7) 5天后开启每天定时清空test表，一个月后停止执行：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\nSTARTS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\nENDS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">MONTH</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n[ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。\n</code></pre>\n<h3 id=\"8-每天定时清空test表-只执行一次，任务完成后就终止该事件-：\"><a href=\"#8-每天定时清空test表-只执行一次，任务完成后就终止该事件-：\" class=\"headerlink\" title=\"8) 每天定时清空test表(只执行一次，任务完成后就终止该事件)：\"></a>8) 每天定时清空test表(只执行一次，任务完成后就终止该事件)：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">ON</span> COMPLETION <span class=\"keyword\">NOT</span> <span class=\"keyword\">PRESERVE</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<p>[ENABLE | DISABLE]可是设置该事件创建后状态是否开启或关闭，默认为ENABLE。<br>[COMMENT ‘comment’]可以给该事件加上注释。</p>\n<p>修改事件(ALTER EVENT)<br>ALTER EVENT event_name<br>[ON SCHEDULE schedule]<br>[RENAME TO new_event_name]<br>[ON COMPLETION [NOT] PRESERVE]<br>[COMMENT ‘comment’]<br>[ENABLE | DISABLE]<br>[DO sql_statement]<br>1) 临时关闭事件</p>\n<pre><code class=\"sql\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">EVENT</span> e_test <span class=\"keyword\">DISABLE</span>;\n</code></pre>\n<p>2) 开启事件</p>\n<pre><code class=\"sql\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">EVENT</span> e_test <span class=\"keyword\">ENABLE</span>;\n</code></pre>\n<p>3) 将每天清空test表改为5天清空一次：</p>\n<pre><code class=\"sql\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">EVENT</span> e_test <span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>;\n</code></pre>\n<p>删除事件(DROP EVENT)<br>语法很简单，如下所示：</p>\n<p>DROP EVENT [IF EXISTS] event_name<br>例如删除前面创建的e_test事件</p>\n<p>DROP EVENT e_test;<br>当然前提是这个事件存在，否则会产生ERROR 1513 (HY000): Unknown event错误，因此最好加上IF EXISTS</p>\n<p>DROP EVENT IF EXISTS e_test;</p>\n","excerpt":"","more":"<h2 id=\"关于event-scheduler的操作\"><a href=\"#关于event-scheduler的操作\" class=\"headerlink\" title=\"关于event_scheduler的操作\"></a>关于event_scheduler的操作</h2><h3 id=\"要查看当前是否已开启事件调度器，可执行如下SQL：\"><a href=\"#要查看当前是否已开启事件调度器，可执行如下SQL：\" class=\"headerlink\" title=\"要查看当前是否已开启事件调度器，可执行如下SQL：\"></a>要查看当前是否已开启事件调度器，可执行如下SQL：</h3><pre><code class=\"sql\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">VARIABLES</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'event_scheduler'</span>;\n<span class=\"keyword\">SELECT</span> @@event_scheduler;\n<span class=\"keyword\">SHOW</span> <span class=\"keyword\">PROCESSLIST</span>;\n</code></pre>\n<p>+—————–+——-+<br>| Variable_name   | Value |<br>+—————–+——-+<br>| event_scheduler | OFF   |<br>+—————–+——-+</p>\n<h3 id=\"启动方法：\"><a href=\"#启动方法：\" class=\"headerlink\" title=\"启动方法：\"></a>启动方法：</h3><pre><code class=\"sql\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> event_scheduler = <span class=\"number\">1</span>;\n<span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> event_scheduler = <span class=\"keyword\">ON</span>;\n</code></pre>\n<p>或者  my.ini or my.cnf 中的<br>[mysqld] 添加<br>event_scheduler=ON</p>\n<ul>\n<li>创建事件(CREATE EVENT)<br>CREATE EVENT [IF NOT EXISTS] event_name<br>ON SCHEDULE schedule<br>[ON COMPLETION [NOT] PRESERVE]<br>[ENABLE | DISABLE]<br>[COMMENT ‘comment’]<br>DO sql_statement;</li>\n</ul>\n<p>schedule:<br>AT TIMESTAMP [+ INTERVAL INTERVAL]<br>| EVERY INTERVAL [STARTS TIMESTAMP] [ENDS TIMESTAMP]</p>\n<p>INTERVAL:<br>quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |<br>            WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |<br>            DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}</p>\n<p><strong>使用方法</strong> </p>\n<h3 id=\"1-首先来看一个简单的例子来演示每秒插入一条记录到数据表\"><a href=\"#1-首先来看一个简单的例子来演示每秒插入一条记录到数据表\" class=\"headerlink\" title=\"1)首先来看一个简单的例子来演示每秒插入一条记录到数据表:\"></a>1)首先来看一个简单的例子来演示每秒插入一条记录到数据表:</h3><pre><code class=\"sql\"><span class=\"keyword\">USE</span> <span class=\"keyword\">test</span>;\n<span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> aaa (timeline <span class=\"keyword\">TIMESTAMP</span>);\n<span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test_insert\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">SECOND</span> \n<span class=\"keyword\">DO</span> <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.aaa <span class=\"keyword\">VALUES</span> (<span class=\"keyword\">CURRENT_TIMESTAMP</span>);\n</code></pre>\n<p>等待3秒钟后，再执行查询成功。</p>\n<h3 id=\"2-5天后清空test表：\"><a href=\"#2-5天后清空test表：\" class=\"headerlink\" title=\"2) 5天后清空test表：\"></a>2) 5天后清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE <span class=\"keyword\">AT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"3-2007年7月20日12点整清空test表：\"><a href=\"#3-2007年7月20日12点整清空test表：\" class=\"headerlink\" title=\"3) 2007年7月20日12点整清空test表：\"></a>3) 2007年7月20日12点整清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE <span class=\"keyword\">AT</span> <span class=\"keyword\">TIMESTAMP</span> <span class=\"string\">'2007-07-20 12:00:00'</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"4-每天定时清空test表：\"><a href=\"#4-每天定时清空test表：\" class=\"headerlink\" title=\"4) 每天定时清空test表：\"></a>4) 每天定时清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"5-5天后开启每天定时清空test表：\"><a href=\"#5-5天后开启每天定时清空test表：\" class=\"headerlink\" title=\"5) 5天后开启每天定时清空test表：\"></a>5) 5天后开启每天定时清空test表：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\nSTARTS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"6-每天定时清空test表，5天后停止执行：\"><a href=\"#6-每天定时清空test表，5天后停止执行：\" class=\"headerlink\" title=\"6) 每天定时清空test表，5天后停止执行：\"></a>6) 每天定时清空test表，5天后停止执行：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\nENDS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<h3 id=\"7-5天后开启每天定时清空test表，一个月后停止执行：\"><a href=\"#7-5天后开启每天定时清空test表，一个月后停止执行：\" class=\"headerlink\" title=\"7) 5天后开启每天定时清空test表，一个月后停止执行：\"></a>7) 5天后开启每天定时清空test表，一个月后停止执行：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\nSTARTS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>\nENDS <span class=\"keyword\">CURRENT_TIMESTAMP</span> + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">MONTH</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n[ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。\n</code></pre>\n<h3 id=\"8-每天定时清空test表-只执行一次，任务完成后就终止该事件-：\"><a href=\"#8-每天定时清空test表-只执行一次，任务完成后就终止该事件-：\" class=\"headerlink\" title=\"8) 每天定时清空test表(只执行一次，任务完成后就终止该事件)：\"></a>8) 每天定时清空test表(只执行一次，任务完成后就终止该事件)：</h3><pre><code class=\"sql\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> e_test\n<span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">1</span> <span class=\"keyword\">DAY</span>\n<span class=\"keyword\">ON</span> COMPLETION <span class=\"keyword\">NOT</span> <span class=\"keyword\">PRESERVE</span>\n<span class=\"keyword\">DO</span> <span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> test.aaa;\n</code></pre>\n<p>[ENABLE | DISABLE]可是设置该事件创建后状态是否开启或关闭，默认为ENABLE。<br>[COMMENT ‘comment’]可以给该事件加上注释。</p>\n<p>修改事件(ALTER EVENT)<br>ALTER EVENT event_name<br>[ON SCHEDULE schedule]<br>[RENAME TO new_event_name]<br>[ON COMPLETION [NOT] PRESERVE]<br>[COMMENT ‘comment’]<br>[ENABLE | DISABLE]<br>[DO sql_statement]<br>1) 临时关闭事件</p>\n<pre><code class=\"sql\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">EVENT</span> e_test <span class=\"keyword\">DISABLE</span>;\n</code></pre>\n<p>2) 开启事件</p>\n<pre><code class=\"sql\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">EVENT</span> e_test <span class=\"keyword\">ENABLE</span>;\n</code></pre>\n<p>3) 将每天清空test表改为5天清空一次：</p>\n<pre><code class=\"sql\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">EVENT</span> e_test <span class=\"keyword\">ON</span> SCHEDULE EVERY <span class=\"number\">5</span> <span class=\"keyword\">DAY</span>;\n</code></pre>\n<p>删除事件(DROP EVENT)<br>语法很简单，如下所示：</p>\n<p>DROP EVENT [IF EXISTS] event_name<br>例如删除前面创建的e_test事件</p>\n<p>DROP EVENT e_test;<br>当然前提是这个事件存在，否则会产生ERROR 1513 (HY000): Unknown event错误，因此最好加上IF EXISTS</p>\n<p>DROP EVENT IF EXISTS e_test;</p>\n"},{"title":"logstash_fileter","date":"2016-12-05T12:45:53.000Z","_content":"\n## Logstash插件配置（ELK）\n\n\n官方插件参考\n[plugin](https://www.elastic.co/guide/en/logstash/5.0/filter-plugins.html)\n\n\n### 以下是生产环境的一个过滤配置：\n涉及到 geoip 配置和 useragent配置:\n*  5.0以前版本配置：database => \"/srv/elk/server/GeoLiteCity.dat\"\n*  5.0之后配置：    database => \"/opt/pkgs/GeoLite2-City.mmdb\"\n### 对于最新的data下载：\n\ngeoip数据网站：[data](http://dev.maxmind.com/geoip/geoip2/geolite2/)\n下载数据：\n[city](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz)\n[Country](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz)\n\n```conf\ninput {\n    redis{\n                host => \"127.0.0.1\"\n                data_type => \"list\"\n                key => \"logstash\"\n        }\n}\n\nfilter {\n    grok {\n        match => [\"message\", \"%{IP:client_ip},,-,,\\[%{HTTPDATE:timestamp}\\],,\\\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version}))\\\",,%{NUMBER:status:int},,%{NUMBER:bytes:float},,%{QS:referrer},,%{QS:agent},,\\\"%{IP:upstream_host}\\\",,\\\"(%{NUMBER:upstream_time:float})\\\",,\\\"(%{NUMBER:request_time:float})\\\",,(%{NUMBER:request_size:float}),,%{QS:login_id}\"]\n        }\n\n      ruby {\n           code => \"event['@timestamp'] = event['@timestamp'].getlocal\"\n           #code => \"event['@timestamp'] = event['@timestamp'].localtime('+08:00')\"\n           #code => \"event['@timestamp'] = event['@timestamp'].local('-08:00')\"\n           #code => \"event['@timestamp'] = LogStash::Timestamp.new( Time.at( event['@timestamp'].to_i() ).getlocal())\"\n}\n\n    useragent {\n        source => \"agent\"\n        target => \"brower\"\n   }\n\n    geoip {\n        source => \"upstream_host\"\n        target => \"geoip\"\n        database => \"/opt/pkgs/GeoLite2-City.mmdb\"\n        add_field => [ \"[geoip][coordinates]\", \"%{[geoip][longitude]}\" ]\n        add_field => [ \"[geoip][coordinates]\", \"%{[geoip][latitude]}\"  ]\n    }\n\n\n    mutate {\n        convert => [ \"[geoip][coordinates]\", \"float\"]\n    }\n}\n\noutput {\n elasticsearch {\n hosts => [\"10.57.112.126:9200\"]\n }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"10.70.14.144:9200\"]\n    index => \"shgt-nginx-%{+YYYY.MM.dd}\"\n  }\n}\n```   \n","source":"_posts/logstash-fileter.md","raw":"---\ntitle: logstash_fileter\ndate: 2016-12-05 20:45:53\ntags:\n- 技术\ncategories: [linux,数据库,开发]\n---\n\n## Logstash插件配置（ELK）\n\n\n官方插件参考\n[plugin](https://www.elastic.co/guide/en/logstash/5.0/filter-plugins.html)\n\n\n### 以下是生产环境的一个过滤配置：\n涉及到 geoip 配置和 useragent配置:\n*  5.0以前版本配置：database => \"/srv/elk/server/GeoLiteCity.dat\"\n*  5.0之后配置：    database => \"/opt/pkgs/GeoLite2-City.mmdb\"\n### 对于最新的data下载：\n\ngeoip数据网站：[data](http://dev.maxmind.com/geoip/geoip2/geolite2/)\n下载数据：\n[city](http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz)\n[Country](http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz)\n\n```conf\ninput {\n    redis{\n                host => \"127.0.0.1\"\n                data_type => \"list\"\n                key => \"logstash\"\n        }\n}\n\nfilter {\n    grok {\n        match => [\"message\", \"%{IP:client_ip},,-,,\\[%{HTTPDATE:timestamp}\\],,\\\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version}))\\\",,%{NUMBER:status:int},,%{NUMBER:bytes:float},,%{QS:referrer},,%{QS:agent},,\\\"%{IP:upstream_host}\\\",,\\\"(%{NUMBER:upstream_time:float})\\\",,\\\"(%{NUMBER:request_time:float})\\\",,(%{NUMBER:request_size:float}),,%{QS:login_id}\"]\n        }\n\n      ruby {\n           code => \"event['@timestamp'] = event['@timestamp'].getlocal\"\n           #code => \"event['@timestamp'] = event['@timestamp'].localtime('+08:00')\"\n           #code => \"event['@timestamp'] = event['@timestamp'].local('-08:00')\"\n           #code => \"event['@timestamp'] = LogStash::Timestamp.new( Time.at( event['@timestamp'].to_i() ).getlocal())\"\n}\n\n    useragent {\n        source => \"agent\"\n        target => \"brower\"\n   }\n\n    geoip {\n        source => \"upstream_host\"\n        target => \"geoip\"\n        database => \"/opt/pkgs/GeoLite2-City.mmdb\"\n        add_field => [ \"[geoip][coordinates]\", \"%{[geoip][longitude]}\" ]\n        add_field => [ \"[geoip][coordinates]\", \"%{[geoip][latitude]}\"  ]\n    }\n\n\n    mutate {\n        convert => [ \"[geoip][coordinates]\", \"float\"]\n    }\n}\n\noutput {\n elasticsearch {\n hosts => [\"10.57.112.126:9200\"]\n }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"10.70.14.144:9200\"]\n    index => \"shgt-nginx-%{+YYYY.MM.dd}\"\n  }\n}\n```   \n","slug":"logstash-fileter","published":1,"updated":"2016-12-06T01:38:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1k0006opuloqj7ucyv","content":"<h2 id=\"Logstash插件配置（ELK）\"><a href=\"#Logstash插件配置（ELK）\" class=\"headerlink\" title=\"Logstash插件配置（ELK）\"></a>Logstash插件配置（ELK）</h2><p>官方插件参考<br><a href=\"https://www.elastic.co/guide/en/logstash/5.0/filter-plugins.html\" target=\"_blank\" rel=\"external\">plugin</a></p>\n<h3 id=\"以下是生产环境的一个过滤配置：\"><a href=\"#以下是生产环境的一个过滤配置：\" class=\"headerlink\" title=\"以下是生产环境的一个过滤配置：\"></a>以下是生产环境的一个过滤配置：</h3><p>涉及到 geoip 配置和 useragent配置:</p>\n<ul>\n<li>5.0以前版本配置：database =&gt; “/srv/elk/server/GeoLiteCity.dat”</li>\n<li>5.0之后配置：    database =&gt; “/opt/pkgs/GeoLite2-City.mmdb”<h3 id=\"对于最新的data下载：\"><a href=\"#对于最新的data下载：\" class=\"headerlink\" title=\"对于最新的data下载：\"></a>对于最新的data下载：</h3></li>\n</ul>\n<p>geoip数据网站：<a href=\"http://dev.maxmind.com/geoip/geoip2/geolite2/\" target=\"_blank\" rel=\"external\">data</a><br>下载数据：<br><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\" target=\"_blank\" rel=\"external\">city</a><br><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz\" target=\"_blank\" rel=\"external\">Country</a></p>\n<pre><code class=\"conf\">input {\n    redis{\n                host =&gt; &quot;127.0.0.1&quot;\n                data_type =&gt; &quot;list&quot;\n                key =&gt; &quot;logstash&quot;\n        }\n}\n\nfilter {\n    grok {\n        match =&gt; [&quot;message&quot;, &quot;%{IP:client_ip},,-,,\\[%{HTTPDATE:timestamp}\\],,\\&quot;(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version}))\\&quot;,,%{NUMBER:status:int},,%{NUMBER:bytes:float},,%{QS:referrer},,%{QS:agent},,\\&quot;%{IP:upstream_host}\\&quot;,,\\&quot;(%{NUMBER:upstream_time:float})\\&quot;,,\\&quot;(%{NUMBER:request_time:float})\\&quot;,,(%{NUMBER:request_size:float}),,%{QS:login_id}&quot;]\n        }\n\n      ruby {\n           code =&gt; &quot;event[&apos;@timestamp&apos;] = event[&apos;@timestamp&apos;].getlocal&quot;\n           #code =&gt; &quot;event[&apos;@timestamp&apos;] = event[&apos;@timestamp&apos;].localtime(&apos;+08:00&apos;)&quot;\n           #code =&gt; &quot;event[&apos;@timestamp&apos;] = event[&apos;@timestamp&apos;].local(&apos;-08:00&apos;)&quot;\n           #code =&gt; &quot;event[&apos;@timestamp&apos;] = LogStash::Timestamp.new( Time.at( event[&apos;@timestamp&apos;].to_i() ).getlocal())&quot;\n}\n\n    useragent {\n        source =&gt; &quot;agent&quot;\n        target =&gt; &quot;brower&quot;\n   }\n\n    geoip {\n        source =&gt; &quot;upstream_host&quot;\n        target =&gt; &quot;geoip&quot;\n        database =&gt; &quot;/opt/pkgs/GeoLite2-City.mmdb&quot;\n        add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%{[geoip][longitude]}&quot; ]\n        add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%{[geoip][latitude]}&quot;  ]\n    }\n\n\n    mutate {\n        convert =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot;]\n    }\n}\n\noutput {\n elasticsearch {\n hosts =&gt; [&quot;10.57.112.126:9200&quot;]\n }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [&quot;10.70.14.144:9200&quot;]\n    index =&gt; &quot;shgt-nginx-%{+YYYY.MM.dd}&quot;\n  }\n}\n</code></pre>\n","excerpt":"","more":"<h2 id=\"Logstash插件配置（ELK）\"><a href=\"#Logstash插件配置（ELK）\" class=\"headerlink\" title=\"Logstash插件配置（ELK）\"></a>Logstash插件配置（ELK）</h2><p>官方插件参考<br><a href=\"https://www.elastic.co/guide/en/logstash/5.0/filter-plugins.html\">plugin</a></p>\n<h3 id=\"以下是生产环境的一个过滤配置：\"><a href=\"#以下是生产环境的一个过滤配置：\" class=\"headerlink\" title=\"以下是生产环境的一个过滤配置：\"></a>以下是生产环境的一个过滤配置：</h3><p>涉及到 geoip 配置和 useragent配置:</p>\n<ul>\n<li>5.0以前版本配置：database =&gt; “/srv/elk/server/GeoLiteCity.dat”</li>\n<li>5.0之后配置：    database =&gt; “/opt/pkgs/GeoLite2-City.mmdb”<h3 id=\"对于最新的data下载：\"><a href=\"#对于最新的data下载：\" class=\"headerlink\" title=\"对于最新的data下载：\"></a>对于最新的data下载：</h3></li>\n</ul>\n<p>geoip数据网站：<a href=\"http://dev.maxmind.com/geoip/geoip2/geolite2/\">data</a><br>下载数据：<br><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\">city</a><br><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.mmdb.gz\">Country</a></p>\n<pre><code class=\"conf\">input {\n    redis{\n                host =&gt; &quot;127.0.0.1&quot;\n                data_type =&gt; &quot;list&quot;\n                key =&gt; &quot;logstash&quot;\n        }\n}\n\nfilter {\n    grok {\n        match =&gt; [&quot;message&quot;, &quot;%{IP:client_ip},,-,,\\[%{HTTPDATE:timestamp}\\],,\\&quot;(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version}))\\&quot;,,%{NUMBER:status:int},,%{NUMBER:bytes:float},,%{QS:referrer},,%{QS:agent},,\\&quot;%{IP:upstream_host}\\&quot;,,\\&quot;(%{NUMBER:upstream_time:float})\\&quot;,,\\&quot;(%{NUMBER:request_time:float})\\&quot;,,(%{NUMBER:request_size:float}),,%{QS:login_id}&quot;]\n        }\n\n      ruby {\n           code =&gt; &quot;event[&apos;@timestamp&apos;] = event[&apos;@timestamp&apos;].getlocal&quot;\n           #code =&gt; &quot;event[&apos;@timestamp&apos;] = event[&apos;@timestamp&apos;].localtime(&apos;+08:00&apos;)&quot;\n           #code =&gt; &quot;event[&apos;@timestamp&apos;] = event[&apos;@timestamp&apos;].local(&apos;-08:00&apos;)&quot;\n           #code =&gt; &quot;event[&apos;@timestamp&apos;] = LogStash::Timestamp.new( Time.at( event[&apos;@timestamp&apos;].to_i() ).getlocal())&quot;\n}\n\n    useragent {\n        source =&gt; &quot;agent&quot;\n        target =&gt; &quot;brower&quot;\n   }\n\n    geoip {\n        source =&gt; &quot;upstream_host&quot;\n        target =&gt; &quot;geoip&quot;\n        database =&gt; &quot;/opt/pkgs/GeoLite2-City.mmdb&quot;\n        add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%{[geoip][longitude]}&quot; ]\n        add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%{[geoip][latitude]}&quot;  ]\n    }\n\n\n    mutate {\n        convert =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot;]\n    }\n}\n\noutput {\n elasticsearch {\n hosts =&gt; [&quot;10.57.112.126:9200&quot;]\n }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [&quot;10.70.14.144:9200&quot;]\n    index =&gt; &quot;shgt-nginx-%{+YYYY.MM.dd}&quot;\n  }\n}\n</code></pre>\n"},{"title":"Hello hexo ,hello World","_content":"一直想弄个自己的博客，但是没什么动力，网上介绍hexo,感觉这个正适合自己，\n所以自己就搞了一个，所以就有了这个的存在！\n\n\n## HEXO教程\n\n### 创建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多方法参考 hexo官网: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动服务 默认端口 4000\n\n``` bash\n$ hexo server\n```\n\n更多参考: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态html页面\n\n``` bash\n$ hexo generate\n```\n\n更多参考: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程服务器(git pages)\n\n``` bash\n$ hexo deploy\n```\n\n更多参考: [Deployment](https://hexo.io/docs/deployment.html)\n\n###  部署文档参考：\n\n[令狐葱手把手教你Hexo+Github Pages搭建博客](http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/)\n[GitHub Pages + Hexo搭建博客](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n[使用hexo+github搭建静态博客](https://qiutc.me/post/使用hexo-github搭建静态博客.html)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello hexo ,hello World\n---\n一直想弄个自己的博客，但是没什么动力，网上介绍hexo,感觉这个正适合自己，\n所以自己就搞了一个，所以就有了这个的存在！\n\n\n## HEXO教程\n\n### 创建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多方法参考 hexo官网: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动服务 默认端口 4000\n\n``` bash\n$ hexo server\n```\n\n更多参考: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态html页面\n\n``` bash\n$ hexo generate\n```\n\n更多参考: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程服务器(git pages)\n\n``` bash\n$ hexo deploy\n```\n\n更多参考: [Deployment](https://hexo.io/docs/deployment.html)\n\n###  部署文档参考：\n\n[令狐葱手把手教你Hexo+Github Pages搭建博客](http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/)\n[GitHub Pages + Hexo搭建博客](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n[使用hexo+github搭建静态博客](https://qiutc.me/post/使用hexo-github搭建静态博客.html)","slug":"hello-world","published":1,"date":"2016-12-04T04:41:14.000Z","updated":"2016-12-05T12:46:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1m0007opulrhdkg0i7","content":"<p>一直想弄个自己的博客，但是没什么动力，网上介绍hexo,感觉这个正适合自己，<br>所以自己就搞了一个，所以就有了这个的存在！</p>\n<h2 id=\"HEXO教程\"><a href=\"#HEXO教程\" class=\"headerlink\" title=\"HEXO教程\"></a>HEXO教程</h2><h3 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>更多方法参考 hexo官网: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"启动服务-默认端口-4000\"><a href=\"#启动服务-默认端口-4000\" class=\"headerlink\" title=\"启动服务 默认端口 4000\"></a>启动服务 默认端口 4000</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>更多参考: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"生成静态html页面\"><a href=\"#生成静态html页面\" class=\"headerlink\" title=\"生成静态html页面\"></a>生成静态html页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>更多参考: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"部署到远程服务器-git-pages\"><a href=\"#部署到远程服务器-git-pages\" class=\"headerlink\" title=\"部署到远程服务器(git pages)\"></a>部署到远程服务器(git pages)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>更多参考: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<h3 id=\"部署文档参考：\"><a href=\"#部署文档参考：\" class=\"headerlink\" title=\"部署文档参考：\"></a>部署文档参考：</h3><p><a href=\"http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/\" target=\"_blank\" rel=\"external\">令狐葱手把手教你Hexo+Github Pages搭建博客</a><br><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"external\">GitHub Pages + Hexo搭建博客</a><br><a href=\"https://qiutc.me/post/使用hexo-github搭建静态博客.html\" target=\"_blank\" rel=\"external\">使用hexo+github搭建静态博客</a></p>\n","excerpt":"","more":"<p>一直想弄个自己的博客，但是没什么动力，网上介绍hexo,感觉这个正适合自己，<br>所以自己就搞了一个，所以就有了这个的存在！</p>\n<h2 id=\"HEXO教程\"><a href=\"#HEXO教程\" class=\"headerlink\" title=\"HEXO教程\"></a>HEXO教程</h2><h3 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>更多方法参考 hexo官网: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"启动服务-默认端口-4000\"><a href=\"#启动服务-默认端口-4000\" class=\"headerlink\" title=\"启动服务 默认端口 4000\"></a>启动服务 默认端口 4000</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>更多参考: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态html页面\"><a href=\"#生成静态html页面\" class=\"headerlink\" title=\"生成静态html页面\"></a>生成静态html页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>更多参考: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到远程服务器-git-pages\"><a href=\"#部署到远程服务器-git-pages\" class=\"headerlink\" title=\"部署到远程服务器(git pages)\"></a>部署到远程服务器(git pages)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>更多参考: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<h3 id=\"部署文档参考：\"><a href=\"#部署文档参考：\" class=\"headerlink\" title=\"部署文档参考：\"></a>部署文档参考：</h3><p><a href=\"http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/\">令狐葱手把手教你Hexo+Github Pages搭建博客</a><br><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\">GitHub Pages + Hexo搭建博客</a><br><a href=\"https://qiutc.me/post/使用hexo-github搭建静态博客.html\">使用hexo+github搭建静态博客</a></p>\n"},{"title":"git介绍","date":"2016-12-04T13:45:58.000Z","_content":"\n# 简介\nSCM（Source Code Management）起源，linux内核开发一直用一个叫做BitKeeper的SCM。但是后来许可证被更改,可能对内核开发造成障碍，Linus Torvalds就开发了Git,将linus树仓库转移到了git中,Git的维护人员滨野纯(Junio C Hammano)等人持续进行开发.\n特点: 分布式仓库型SCM,工作区本省就是仓库。开发者拥有各自的仓库，所有的仓库都是并存的。\n\n##  一、在本地仓库进行操作\n\n### 1、创建新的仓库\n```bash\n$ mkdir ~/hello -p\n$ cd ~/hello\n$ git init\n```    \n\n### 2、Git 设置\n\n```bash\n$  git config --add user.email\"geespot@163.com\"\n$  git config --add user.name \"shenji \\\"Yan \\\" geespot\"\n```    \n\n相当于在 .git/config .git/ 添加用户信息\n[user]\n        email = geespot@163.com\n        name = shenji \\\"Yan \\\" geespot\n\n### 3、将文件添加到仓库中\n\n```bash\n$  vim hello.c\n$  git add hello.c\n$  git commit  -m \"add hello.c\"\n```   \n/\\* hello.c \\*/\n#include <stdio.h>\nint main(void)\n{\n    printf(\"Hello Word! \\n\");\n    return 1;\n}\n\n### 4、确认工作状态\n```bash\n$  git status\n$  git ls-files\n$  git diff\n$  git diff HEAD\n```   \n首先将hello.c return 0 改为1；然后新建文件 goodbye.c\n/\\* goobye.c \\*/\n#include <stdio.h>\nint main(void)\n{\n    printf(\"Goodbye world!! \\n\")\n    return 0;\n}\n\ngit diff 不是显示 最新提交与工作区之间的差异，二十\"缓存区\"与工作区之间的差异。\n\n### 5、参照提交记录\n```bash\n$  git log <hash>                   #到提交三列值 hash 为止\n$  git log <hash>..                 #从<hash>之后到最新提交为止\n$  git log <hash1>..<hash2>         #从<hash1> 到<hash2>为止\n$  git log       (git log HEAD)   \t#到最新提交为止、即所有提交\n$  git log HEAD~ (git log HEAD~1)   #到倒数第二次提交为止\n$  git log HEAD~~(git log HEAD~2)   #到倒数第三次提交为止\n$  git log HEAD~2.. HEAD~1          #从倒数第三次提交到倒数第二次提交（仅倒数第二次提交）\n$  git log -p goodbye.c    #指定文件 仅输出与该文件闲逛的提交\n```   \n\n### 6、修改提交\n```bash\n$  git revert HEAD     # 进行的是最新的一次提交 恢复最新一次提交\n$  vi hello.c\n$  git add hello.c\n$  git commit --amend\n$  git log -p #（确认提交信息）\n$  git reset --soft HEAD~1\n$  git reset --hard HEAD\n```   \n对提交记录修改是慎重，特别需要注意的是，这个方法如果用在被其他仓库参照的仓库中，会出现不兼容的问题,因此不能在此情况下使用.\n\n### 7、为提交加标签\n```bash\n$  git tag ver1 HEAD~1    # 倒数第二次提交加标签\n$  git tag -l             # 查看标签\n```   \n###  8、创建分支\n```bash\n$  git branch ver1x ver1   # 为ver1标签为起点 创建名为ver1x的分支\n$  git branch -a           # 查看分支\n```   \n###  9、rebase命令\n\n```bash\n$  git rebase master       #master 的最新提交 如果 --onto 选项指定到任意提交\n```   \n\n### 10、合并分支\n```bash\n$  git barach \n$  vim goodebye.c                                   # return 0 修改成1\n$  git commit -a -m \"mod goodbye.c return 0 to 1\"   # 分支提交\n$  git merge ver1x              # 合并分支\n```   \n\n### 11、提取补丁\n```bash\n$  git format-patch ver1..ver2\n```   \n生成如下补丁\n0001-add-goodbye-mod-hello.patch\n0002-add-thanks.patch\n0003-mod-googbey-return-to-1.patch\n\n###  12、提取代码树\n```bash\n$  git archive --format=tar --prefix=\"hello-v2/\" ver2 > ../hello-ver2.tar\n```   \n\n##  二、与远程仓库进行共同作业\n### 1、复制仓库\n```bash\n$  git clone git://git.kernerl.org/pub/scm/linux/kermer/git/torvalds/linux-2.6\n$  git clone hello local   # 因为kernel比较大1G 这里将hello 当做远程仓库 复制到其他位置\n```   \n### 2、建立本地分支\n```bash\n$ git branch -b work    # 针对当前分支最低呢修改 创建分支\n```   \n\n### 3、追踪分支\n```bash\n$  git branch -r     #显示追踪分支的列表\n$  git remote show origin\n```   \n\n### 4、与远程仓库同步\n```bash\n$ git commit -a\n$ git checkout master\n$ git pull\n```   \n\n###  5、开发分支rebase最新状态\n```bash\n$  git checkout work\n$  git commit -a  -m \"\"\n$  git rebase master\n```   \n\n\n###  6 、git其他有用的命令\n\ngit push      本地仓库直接传递到远程仓库,仅在拥有对远程仓库的修改权限有效\ngit fetch     不进行be你弟分支的合并。git pull 是内部跳出git fetch 和git merge的操作\ngit stash     将工作区未提交的修改保存并移动到蒂塔分支使用。git stash pop 可以调出状态\ngit cherry-pick  将其他分支下的1个提交使用到当前分支使用，由于提交会赋值，因此会编程其他的散列值\ngit gc        删除未使用的对象或文件，优化仓库\ngit am        从mbox格式的文件导入补丁并提交\ngit bisect    用来指定导入了bug的提交\n\n\n\n\n\n\n\n","source":"_posts/git介绍.md","raw":"---\ntitle: git介绍\ndate: 2016-12-04 21:45:58\ntags:\n- 技术\ncategories: [linux,数据库,开发]\n---\n\n# 简介\nSCM（Source Code Management）起源，linux内核开发一直用一个叫做BitKeeper的SCM。但是后来许可证被更改,可能对内核开发造成障碍，Linus Torvalds就开发了Git,将linus树仓库转移到了git中,Git的维护人员滨野纯(Junio C Hammano)等人持续进行开发.\n特点: 分布式仓库型SCM,工作区本省就是仓库。开发者拥有各自的仓库，所有的仓库都是并存的。\n\n##  一、在本地仓库进行操作\n\n### 1、创建新的仓库\n```bash\n$ mkdir ~/hello -p\n$ cd ~/hello\n$ git init\n```    \n\n### 2、Git 设置\n\n```bash\n$  git config --add user.email\"geespot@163.com\"\n$  git config --add user.name \"shenji \\\"Yan \\\" geespot\"\n```    \n\n相当于在 .git/config .git/ 添加用户信息\n[user]\n        email = geespot@163.com\n        name = shenji \\\"Yan \\\" geespot\n\n### 3、将文件添加到仓库中\n\n```bash\n$  vim hello.c\n$  git add hello.c\n$  git commit  -m \"add hello.c\"\n```   \n/\\* hello.c \\*/\n#include <stdio.h>\nint main(void)\n{\n    printf(\"Hello Word! \\n\");\n    return 1;\n}\n\n### 4、确认工作状态\n```bash\n$  git status\n$  git ls-files\n$  git diff\n$  git diff HEAD\n```   \n首先将hello.c return 0 改为1；然后新建文件 goodbye.c\n/\\* goobye.c \\*/\n#include <stdio.h>\nint main(void)\n{\n    printf(\"Goodbye world!! \\n\")\n    return 0;\n}\n\ngit diff 不是显示 最新提交与工作区之间的差异，二十\"缓存区\"与工作区之间的差异。\n\n### 5、参照提交记录\n```bash\n$  git log <hash>                   #到提交三列值 hash 为止\n$  git log <hash>..                 #从<hash>之后到最新提交为止\n$  git log <hash1>..<hash2>         #从<hash1> 到<hash2>为止\n$  git log       (git log HEAD)   \t#到最新提交为止、即所有提交\n$  git log HEAD~ (git log HEAD~1)   #到倒数第二次提交为止\n$  git log HEAD~~(git log HEAD~2)   #到倒数第三次提交为止\n$  git log HEAD~2.. HEAD~1          #从倒数第三次提交到倒数第二次提交（仅倒数第二次提交）\n$  git log -p goodbye.c    #指定文件 仅输出与该文件闲逛的提交\n```   \n\n### 6、修改提交\n```bash\n$  git revert HEAD     # 进行的是最新的一次提交 恢复最新一次提交\n$  vi hello.c\n$  git add hello.c\n$  git commit --amend\n$  git log -p #（确认提交信息）\n$  git reset --soft HEAD~1\n$  git reset --hard HEAD\n```   \n对提交记录修改是慎重，特别需要注意的是，这个方法如果用在被其他仓库参照的仓库中，会出现不兼容的问题,因此不能在此情况下使用.\n\n### 7、为提交加标签\n```bash\n$  git tag ver1 HEAD~1    # 倒数第二次提交加标签\n$  git tag -l             # 查看标签\n```   \n###  8、创建分支\n```bash\n$  git branch ver1x ver1   # 为ver1标签为起点 创建名为ver1x的分支\n$  git branch -a           # 查看分支\n```   \n###  9、rebase命令\n\n```bash\n$  git rebase master       #master 的最新提交 如果 --onto 选项指定到任意提交\n```   \n\n### 10、合并分支\n```bash\n$  git barach \n$  vim goodebye.c                                   # return 0 修改成1\n$  git commit -a -m \"mod goodbye.c return 0 to 1\"   # 分支提交\n$  git merge ver1x              # 合并分支\n```   \n\n### 11、提取补丁\n```bash\n$  git format-patch ver1..ver2\n```   \n生成如下补丁\n0001-add-goodbye-mod-hello.patch\n0002-add-thanks.patch\n0003-mod-googbey-return-to-1.patch\n\n###  12、提取代码树\n```bash\n$  git archive --format=tar --prefix=\"hello-v2/\" ver2 > ../hello-ver2.tar\n```   \n\n##  二、与远程仓库进行共同作业\n### 1、复制仓库\n```bash\n$  git clone git://git.kernerl.org/pub/scm/linux/kermer/git/torvalds/linux-2.6\n$  git clone hello local   # 因为kernel比较大1G 这里将hello 当做远程仓库 复制到其他位置\n```   \n### 2、建立本地分支\n```bash\n$ git branch -b work    # 针对当前分支最低呢修改 创建分支\n```   \n\n### 3、追踪分支\n```bash\n$  git branch -r     #显示追踪分支的列表\n$  git remote show origin\n```   \n\n### 4、与远程仓库同步\n```bash\n$ git commit -a\n$ git checkout master\n$ git pull\n```   \n\n###  5、开发分支rebase最新状态\n```bash\n$  git checkout work\n$  git commit -a  -m \"\"\n$  git rebase master\n```   \n\n\n###  6 、git其他有用的命令\n\ngit push      本地仓库直接传递到远程仓库,仅在拥有对远程仓库的修改权限有效\ngit fetch     不进行be你弟分支的合并。git pull 是内部跳出git fetch 和git merge的操作\ngit stash     将工作区未提交的修改保存并移动到蒂塔分支使用。git stash pop 可以调出状态\ngit cherry-pick  将其他分支下的1个提交使用到当前分支使用，由于提交会赋值，因此会编程其他的散列值\ngit gc        删除未使用的对象或文件，优化仓库\ngit am        从mbox格式的文件导入补丁并提交\ngit bisect    用来指定导入了bug的提交\n\n\n\n\n\n\n\n","slug":"git介绍","published":1,"updated":"2016-12-05T01:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1o0008opul1cg9vau9","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>SCM（Source Code Management）起源，linux内核开发一直用一个叫做BitKeeper的SCM。但是后来许可证被更改,可能对内核开发造成障碍，Linus Torvalds就开发了Git,将linus树仓库转移到了git中,Git的维护人员滨野纯(Junio C Hammano)等人持续进行开发.<br>特点: 分布式仓库型SCM,工作区本省就是仓库。开发者拥有各自的仓库，所有的仓库都是并存的。</p>\n<h2 id=\"一、在本地仓库进行操作\"><a href=\"#一、在本地仓库进行操作\" class=\"headerlink\" title=\"一、在本地仓库进行操作\"></a>一、在本地仓库进行操作</h2><h3 id=\"1、创建新的仓库\"><a href=\"#1、创建新的仓库\" class=\"headerlink\" title=\"1、创建新的仓库\"></a>1、创建新的仓库</h3><pre><code class=\"bash\">$ mkdir ~/hello -p\n$ <span class=\"built_in\">cd</span> ~/hello\n$ git init\n</code></pre>\n<h3 id=\"2、Git-设置\"><a href=\"#2、Git-设置\" class=\"headerlink\" title=\"2、Git 设置\"></a>2、Git 设置</h3><pre><code class=\"bash\">$  git config --add user.email<span class=\"string\">\"geespot@163.com\"</span>\n$  git config --add user.name <span class=\"string\">\"shenji \\\"Yan \\\" geespot\"</span>\n</code></pre>\n<p>相当于在 .git/config .git/ 添加用户信息<br>[user]<br>        email = geespot@163.com<br>        name = shenji \\”Yan \\” geespot</p>\n<h3 id=\"3、将文件添加到仓库中\"><a href=\"#3、将文件添加到仓库中\" class=\"headerlink\" title=\"3、将文件添加到仓库中\"></a>3、将文件添加到仓库中</h3><pre><code class=\"bash\">$  vim hello.c\n$  git add hello.c\n$  git commit  -m <span class=\"string\">\"add hello.c\"</span>\n</code></pre>\n<p>/* hello.c */</p>\n<p>#include <stdio.h><br>int main(void)<br>{<br>    printf(“Hello Word! \\n”);<br>    return 1;<br>}</stdio.h></p>\n<h3 id=\"4、确认工作状态\"><a href=\"#4、确认工作状态\" class=\"headerlink\" title=\"4、确认工作状态\"></a>4、确认工作状态</h3><pre><code class=\"bash\">$  git status\n$  git ls-files\n$  git diff\n$  git diff HEAD\n</code></pre>\n<p>首先将hello.c return 0 改为1；然后新建文件 goodbye.c<br>/* goobye.c */</p>\n<p>#include <stdio.h><br>int main(void)<br>{<br>    printf(“Goodbye world!! \\n”)<br>    return 0;<br>}</stdio.h></p>\n<p>git diff 不是显示 最新提交与工作区之间的差异，二十”缓存区”与工作区之间的差异。</p>\n<h3 id=\"5、参照提交记录\"><a href=\"#5、参照提交记录\" class=\"headerlink\" title=\"5、参照提交记录\"></a>5、参照提交记录</h3><pre><code class=\"bash\">$  git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">hash</span>&gt;                   <span class=\"comment\">#到提交三列值 hash 为止</span>\n$  git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">hash</span>&gt;..                 <span class=\"comment\">#从&lt;hash&gt;之后到最新提交为止</span>\n$  git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">hash</span>1&gt;..&lt;<span class=\"built_in\">hash</span>2&gt;         <span class=\"comment\">#从&lt;hash1&gt; 到&lt;hash2&gt;为止</span>\n$  git <span class=\"built_in\">log</span>       (git <span class=\"built_in\">log</span> HEAD)       <span class=\"comment\">#到最新提交为止、即所有提交</span>\n$  git <span class=\"built_in\">log</span> HEAD~ (git <span class=\"built_in\">log</span> HEAD~1)   <span class=\"comment\">#到倒数第二次提交为止</span>\n$  git <span class=\"built_in\">log</span> HEAD~~(git <span class=\"built_in\">log</span> HEAD~2)   <span class=\"comment\">#到倒数第三次提交为止</span>\n$  git <span class=\"built_in\">log</span> HEAD~2.. HEAD~1          <span class=\"comment\">#从倒数第三次提交到倒数第二次提交（仅倒数第二次提交）</span>\n$  git <span class=\"built_in\">log</span> -p goodbye.c    <span class=\"comment\">#指定文件 仅输出与该文件闲逛的提交</span>\n</code></pre>\n<h3 id=\"6、修改提交\"><a href=\"#6、修改提交\" class=\"headerlink\" title=\"6、修改提交\"></a>6、修改提交</h3><pre><code class=\"bash\">$  git revert HEAD     <span class=\"comment\"># 进行的是最新的一次提交 恢复最新一次提交</span>\n$  vi hello.c\n$  git add hello.c\n$  git commit --amend\n$  git <span class=\"built_in\">log</span> -p <span class=\"comment\">#（确认提交信息）</span>\n$  git reset --soft HEAD~1\n$  git reset --hard HEAD\n</code></pre>\n<p>对提交记录修改是慎重，特别需要注意的是，这个方法如果用在被其他仓库参照的仓库中，会出现不兼容的问题,因此不能在此情况下使用.</p>\n<h3 id=\"7、为提交加标签\"><a href=\"#7、为提交加标签\" class=\"headerlink\" title=\"7、为提交加标签\"></a>7、为提交加标签</h3><pre><code class=\"bash\">$  git tag ver1 HEAD~1    <span class=\"comment\"># 倒数第二次提交加标签</span>\n$  git tag <span class=\"_\">-l</span>             <span class=\"comment\"># 查看标签</span>\n</code></pre>\n<h3 id=\"8、创建分支\"><a href=\"#8、创建分支\" class=\"headerlink\" title=\"8、创建分支\"></a>8、创建分支</h3><pre><code class=\"bash\">$  git branch ver1x ver1   <span class=\"comment\"># 为ver1标签为起点 创建名为ver1x的分支</span>\n$  git branch <span class=\"_\">-a</span>           <span class=\"comment\"># 查看分支</span>\n</code></pre>\n<h3 id=\"9、rebase命令\"><a href=\"#9、rebase命令\" class=\"headerlink\" title=\"9、rebase命令\"></a>9、rebase命令</h3><pre><code class=\"bash\">$  git rebase master       <span class=\"comment\">#master 的最新提交 如果 --onto 选项指定到任意提交</span>\n</code></pre>\n<h3 id=\"10、合并分支\"><a href=\"#10、合并分支\" class=\"headerlink\" title=\"10、合并分支\"></a>10、合并分支</h3><pre><code class=\"bash\">$  git barach \n$  vim goodebye.c                                   <span class=\"comment\"># return 0 修改成1</span>\n$  git commit <span class=\"_\">-a</span> -m <span class=\"string\">\"mod goodbye.c return 0 to 1\"</span>   <span class=\"comment\"># 分支提交</span>\n$  git merge ver1x              <span class=\"comment\"># 合并分支</span>\n</code></pre>\n<h3 id=\"11、提取补丁\"><a href=\"#11、提取补丁\" class=\"headerlink\" title=\"11、提取补丁\"></a>11、提取补丁</h3><pre><code class=\"bash\">$  git format-patch ver1..ver2\n</code></pre>\n<p>生成如下补丁<br>0001-add-goodbye-mod-hello.patch<br>0002-add-thanks.patch<br>0003-mod-googbey-return-to-1.patch</p>\n<h3 id=\"12、提取代码树\"><a href=\"#12、提取代码树\" class=\"headerlink\" title=\"12、提取代码树\"></a>12、提取代码树</h3><pre><code class=\"bash\">$  git archive --format=tar --prefix=<span class=\"string\">\"hello-v2/\"</span> ver2 &gt; ../hello-ver2.tar\n</code></pre>\n<h2 id=\"二、与远程仓库进行共同作业\"><a href=\"#二、与远程仓库进行共同作业\" class=\"headerlink\" title=\"二、与远程仓库进行共同作业\"></a>二、与远程仓库进行共同作业</h2><h3 id=\"1、复制仓库\"><a href=\"#1、复制仓库\" class=\"headerlink\" title=\"1、复制仓库\"></a>1、复制仓库</h3><pre><code class=\"bash\">$  git <span class=\"built_in\">clone</span> git://git.kernerl.org/pub/scm/linux/kermer/git/torvalds/linux-2.6\n$  git <span class=\"built_in\">clone</span> hello <span class=\"built_in\">local</span>   <span class=\"comment\"># 因为kernel比较大1G 这里将hello 当做远程仓库 复制到其他位置</span>\n</code></pre>\n<h3 id=\"2、建立本地分支\"><a href=\"#2、建立本地分支\" class=\"headerlink\" title=\"2、建立本地分支\"></a>2、建立本地分支</h3><pre><code class=\"bash\">$ git branch -b work    <span class=\"comment\"># 针对当前分支最低呢修改 创建分支</span>\n</code></pre>\n<h3 id=\"3、追踪分支\"><a href=\"#3、追踪分支\" class=\"headerlink\" title=\"3、追踪分支\"></a>3、追踪分支</h3><pre><code class=\"bash\">$  git branch -r     <span class=\"comment\">#显示追踪分支的列表</span>\n$  git remote show origin\n</code></pre>\n<h3 id=\"4、与远程仓库同步\"><a href=\"#4、与远程仓库同步\" class=\"headerlink\" title=\"4、与远程仓库同步\"></a>4、与远程仓库同步</h3><pre><code class=\"bash\">$ git commit <span class=\"_\">-a</span>\n$ git checkout master\n$ git pull\n</code></pre>\n<h3 id=\"5、开发分支rebase最新状态\"><a href=\"#5、开发分支rebase最新状态\" class=\"headerlink\" title=\"5、开发分支rebase最新状态\"></a>5、开发分支rebase最新状态</h3><pre><code class=\"bash\">$  git checkout work\n$  git commit <span class=\"_\">-a</span>  -m <span class=\"string\">\"\"</span>\n$  git rebase master\n</code></pre>\n<h3 id=\"6-、git其他有用的命令\"><a href=\"#6-、git其他有用的命令\" class=\"headerlink\" title=\"6 、git其他有用的命令\"></a>6 、git其他有用的命令</h3><p>git push      本地仓库直接传递到远程仓库,仅在拥有对远程仓库的修改权限有效<br>git fetch     不进行be你弟分支的合并。git pull 是内部跳出git fetch 和git merge的操作<br>git stash     将工作区未提交的修改保存并移动到蒂塔分支使用。git stash pop 可以调出状态<br>git cherry-pick  将其他分支下的1个提交使用到当前分支使用，由于提交会赋值，因此会编程其他的散列值<br>git gc        删除未使用的对象或文件，优化仓库<br>git am        从mbox格式的文件导入补丁并提交<br>git bisect    用来指定导入了bug的提交</p>\n","excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>SCM（Source Code Management）起源，linux内核开发一直用一个叫做BitKeeper的SCM。但是后来许可证被更改,可能对内核开发造成障碍，Linus Torvalds就开发了Git,将linus树仓库转移到了git中,Git的维护人员滨野纯(Junio C Hammano)等人持续进行开发.<br>特点: 分布式仓库型SCM,工作区本省就是仓库。开发者拥有各自的仓库，所有的仓库都是并存的。</p>\n<h2 id=\"一、在本地仓库进行操作\"><a href=\"#一、在本地仓库进行操作\" class=\"headerlink\" title=\"一、在本地仓库进行操作\"></a>一、在本地仓库进行操作</h2><h3 id=\"1、创建新的仓库\"><a href=\"#1、创建新的仓库\" class=\"headerlink\" title=\"1、创建新的仓库\"></a>1、创建新的仓库</h3><pre><code class=\"bash\">$ mkdir ~/hello -p\n$ <span class=\"built_in\">cd</span> ~/hello\n$ git init\n</code></pre>\n<h3 id=\"2、Git-设置\"><a href=\"#2、Git-设置\" class=\"headerlink\" title=\"2、Git 设置\"></a>2、Git 设置</h3><pre><code class=\"bash\">$  git config --add user.email<span class=\"string\">\"geespot@163.com\"</span>\n$  git config --add user.name <span class=\"string\">\"shenji \\\"Yan \\\" geespot\"</span>\n</code></pre>\n<p>相当于在 .git/config .git/ 添加用户信息<br>[user]<br>        email = geespot@163.com<br>        name = shenji \\”Yan \\” geespot</p>\n<h3 id=\"3、将文件添加到仓库中\"><a href=\"#3、将文件添加到仓库中\" class=\"headerlink\" title=\"3、将文件添加到仓库中\"></a>3、将文件添加到仓库中</h3><pre><code class=\"bash\">$  vim hello.c\n$  git add hello.c\n$  git commit  -m <span class=\"string\">\"add hello.c\"</span>\n</code></pre>\n<p>/* hello.c */</p>\n<p>#include <stdio.h><br>int main(void)<br>{<br>    printf(“Hello Word! \\n”);<br>    return 1;<br>}</p>\n<h3 id=\"4、确认工作状态\"><a href=\"#4、确认工作状态\" class=\"headerlink\" title=\"4、确认工作状态\"></a>4、确认工作状态</h3><pre><code class=\"bash\">$  git status\n$  git ls-files\n$  git diff\n$  git diff HEAD\n</code></pre>\n<p>首先将hello.c return 0 改为1；然后新建文件 goodbye.c<br>/* goobye.c */</p>\n<p>#include <stdio.h><br>int main(void)<br>{<br>    printf(“Goodbye world!! \\n”)<br>    return 0;<br>}</p>\n<p>git diff 不是显示 最新提交与工作区之间的差异，二十”缓存区”与工作区之间的差异。</p>\n<h3 id=\"5、参照提交记录\"><a href=\"#5、参照提交记录\" class=\"headerlink\" title=\"5、参照提交记录\"></a>5、参照提交记录</h3><pre><code class=\"bash\">$  git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">hash</span>&gt;                   <span class=\"comment\">#到提交三列值 hash 为止</span>\n$  git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">hash</span>&gt;..                 <span class=\"comment\">#从&lt;hash&gt;之后到最新提交为止</span>\n$  git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">hash</span>1&gt;..&lt;<span class=\"built_in\">hash</span>2&gt;         <span class=\"comment\">#从&lt;hash1&gt; 到&lt;hash2&gt;为止</span>\n$  git <span class=\"built_in\">log</span>       (git <span class=\"built_in\">log</span> HEAD)       <span class=\"comment\">#到最新提交为止、即所有提交</span>\n$  git <span class=\"built_in\">log</span> HEAD~ (git <span class=\"built_in\">log</span> HEAD~1)   <span class=\"comment\">#到倒数第二次提交为止</span>\n$  git <span class=\"built_in\">log</span> HEAD~~(git <span class=\"built_in\">log</span> HEAD~2)   <span class=\"comment\">#到倒数第三次提交为止</span>\n$  git <span class=\"built_in\">log</span> HEAD~2.. HEAD~1          <span class=\"comment\">#从倒数第三次提交到倒数第二次提交（仅倒数第二次提交）</span>\n$  git <span class=\"built_in\">log</span> -p goodbye.c    <span class=\"comment\">#指定文件 仅输出与该文件闲逛的提交</span>\n</code></pre>\n<h3 id=\"6、修改提交\"><a href=\"#6、修改提交\" class=\"headerlink\" title=\"6、修改提交\"></a>6、修改提交</h3><pre><code class=\"bash\">$  git revert HEAD     <span class=\"comment\"># 进行的是最新的一次提交 恢复最新一次提交</span>\n$  vi hello.c\n$  git add hello.c\n$  git commit --amend\n$  git <span class=\"built_in\">log</span> -p <span class=\"comment\">#（确认提交信息）</span>\n$  git reset --soft HEAD~1\n$  git reset --hard HEAD\n</code></pre>\n<p>对提交记录修改是慎重，特别需要注意的是，这个方法如果用在被其他仓库参照的仓库中，会出现不兼容的问题,因此不能在此情况下使用.</p>\n<h3 id=\"7、为提交加标签\"><a href=\"#7、为提交加标签\" class=\"headerlink\" title=\"7、为提交加标签\"></a>7、为提交加标签</h3><pre><code class=\"bash\">$  git tag ver1 HEAD~1    <span class=\"comment\"># 倒数第二次提交加标签</span>\n$  git tag <span class=\"_\">-l</span>             <span class=\"comment\"># 查看标签</span>\n</code></pre>\n<h3 id=\"8、创建分支\"><a href=\"#8、创建分支\" class=\"headerlink\" title=\"8、创建分支\"></a>8、创建分支</h3><pre><code class=\"bash\">$  git branch ver1x ver1   <span class=\"comment\"># 为ver1标签为起点 创建名为ver1x的分支</span>\n$  git branch <span class=\"_\">-a</span>           <span class=\"comment\"># 查看分支</span>\n</code></pre>\n<h3 id=\"9、rebase命令\"><a href=\"#9、rebase命令\" class=\"headerlink\" title=\"9、rebase命令\"></a>9、rebase命令</h3><pre><code class=\"bash\">$  git rebase master       <span class=\"comment\">#master 的最新提交 如果 --onto 选项指定到任意提交</span>\n</code></pre>\n<h3 id=\"10、合并分支\"><a href=\"#10、合并分支\" class=\"headerlink\" title=\"10、合并分支\"></a>10、合并分支</h3><pre><code class=\"bash\">$  git barach \n$  vim goodebye.c                                   <span class=\"comment\"># return 0 修改成1</span>\n$  git commit <span class=\"_\">-a</span> -m <span class=\"string\">\"mod goodbye.c return 0 to 1\"</span>   <span class=\"comment\"># 分支提交</span>\n$  git merge ver1x              <span class=\"comment\"># 合并分支</span>\n</code></pre>\n<h3 id=\"11、提取补丁\"><a href=\"#11、提取补丁\" class=\"headerlink\" title=\"11、提取补丁\"></a>11、提取补丁</h3><pre><code class=\"bash\">$  git format-patch ver1..ver2\n</code></pre>\n<p>生成如下补丁<br>0001-add-goodbye-mod-hello.patch<br>0002-add-thanks.patch<br>0003-mod-googbey-return-to-1.patch</p>\n<h3 id=\"12、提取代码树\"><a href=\"#12、提取代码树\" class=\"headerlink\" title=\"12、提取代码树\"></a>12、提取代码树</h3><pre><code class=\"bash\">$  git archive --format=tar --prefix=<span class=\"string\">\"hello-v2/\"</span> ver2 &gt; ../hello-ver2.tar\n</code></pre>\n<h2 id=\"二、与远程仓库进行共同作业\"><a href=\"#二、与远程仓库进行共同作业\" class=\"headerlink\" title=\"二、与远程仓库进行共同作业\"></a>二、与远程仓库进行共同作业</h2><h3 id=\"1、复制仓库\"><a href=\"#1、复制仓库\" class=\"headerlink\" title=\"1、复制仓库\"></a>1、复制仓库</h3><pre><code class=\"bash\">$  git <span class=\"built_in\">clone</span> git://git.kernerl.org/pub/scm/linux/kermer/git/torvalds/linux-2.6\n$  git <span class=\"built_in\">clone</span> hello <span class=\"built_in\">local</span>   <span class=\"comment\"># 因为kernel比较大1G 这里将hello 当做远程仓库 复制到其他位置</span>\n</code></pre>\n<h3 id=\"2、建立本地分支\"><a href=\"#2、建立本地分支\" class=\"headerlink\" title=\"2、建立本地分支\"></a>2、建立本地分支</h3><pre><code class=\"bash\">$ git branch -b work    <span class=\"comment\"># 针对当前分支最低呢修改 创建分支</span>\n</code></pre>\n<h3 id=\"3、追踪分支\"><a href=\"#3、追踪分支\" class=\"headerlink\" title=\"3、追踪分支\"></a>3、追踪分支</h3><pre><code class=\"bash\">$  git branch -r     <span class=\"comment\">#显示追踪分支的列表</span>\n$  git remote show origin\n</code></pre>\n<h3 id=\"4、与远程仓库同步\"><a href=\"#4、与远程仓库同步\" class=\"headerlink\" title=\"4、与远程仓库同步\"></a>4、与远程仓库同步</h3><pre><code class=\"bash\">$ git commit <span class=\"_\">-a</span>\n$ git checkout master\n$ git pull\n</code></pre>\n<h3 id=\"5、开发分支rebase最新状态\"><a href=\"#5、开发分支rebase最新状态\" class=\"headerlink\" title=\"5、开发分支rebase最新状态\"></a>5、开发分支rebase最新状态</h3><pre><code class=\"bash\">$  git checkout work\n$  git commit <span class=\"_\">-a</span>  -m <span class=\"string\">\"\"</span>\n$  git rebase master\n</code></pre>\n<h3 id=\"6-、git其他有用的命令\"><a href=\"#6-、git其他有用的命令\" class=\"headerlink\" title=\"6 、git其他有用的命令\"></a>6 、git其他有用的命令</h3><p>git push      本地仓库直接传递到远程仓库,仅在拥有对远程仓库的修改权限有效<br>git fetch     不进行be你弟分支的合并。git pull 是内部跳出git fetch 和git merge的操作<br>git stash     将工作区未提交的修改保存并移动到蒂塔分支使用。git stash pop 可以调出状态<br>git cherry-pick  将其他分支下的1个提交使用到当前分支使用，由于提交会赋值，因此会编程其他的散列值<br>git gc        删除未使用的对象或文件，优化仓库<br>git am        从mbox格式的文件导入补丁并提交<br>git bisect    用来指定导入了bug的提交</p>\n"},{"title":"nignx_ssl","date":"2016-12-07T02:06:43.000Z","_content":"### nginx 私有证书生成\n```bash\n$ cd /etc/nginx/conf.d\n$ openssl genrsa -des3 -out server.key 1024\n$ openssl req -new -key server.key -out server.csr\n$ cp server.key server.key.org\n$ openssl rsa -in server.key.org -out server.key\n$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```   \n\n### nginx 配置\n```conf\nserver {\n    server_name ss.shgt.com;\n    listen 443;\n    ssl on;\n    ssl_certificate /etc/nginx/conf.d/server.crt;\n    ssl_certificate_key /etc/nginx/conf.d/server.key;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.php index.html index.htm;\n    }\n\n}\n```   \n","source":"_posts/nignx-ssl.md","raw":"---\ntitle: nignx_ssl\ndate: 2016-12-07 10:06:43\ntags:\n- 技术\ncategories: [[linux,数据库,运维]]\n---\n### nginx 私有证书生成\n```bash\n$ cd /etc/nginx/conf.d\n$ openssl genrsa -des3 -out server.key 1024\n$ openssl req -new -key server.key -out server.csr\n$ cp server.key server.key.org\n$ openssl rsa -in server.key.org -out server.key\n$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```   \n\n### nginx 配置\n```conf\nserver {\n    server_name ss.shgt.com;\n    listen 443;\n    ssl on;\n    ssl_certificate /etc/nginx/conf.d/server.crt;\n    ssl_certificate_key /etc/nginx/conf.d/server.key;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.php index.html index.htm;\n    }\n\n}\n```   \n","slug":"nignx-ssl","published":1,"updated":"2016-12-07T03:04:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1t000bopulz9kzaxt0","content":"<h3 id=\"nginx-私有证书生成\"><a href=\"#nginx-私有证书生成\" class=\"headerlink\" title=\"nginx 私有证书生成\"></a>nginx 私有证书生成</h3><pre><code class=\"bash\">$ <span class=\"built_in\">cd</span> /etc/nginx/conf.d\n$ openssl genrsa -des3 -out server.key 1024\n$ openssl req -new -key server.key -out server.csr\n$ cp server.key server.key.org\n$ openssl rsa -in server.key.org -out server.key\n$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n</code></pre>\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><pre><code class=\"conf\">server {\n    server_name ss.shgt.com;\n    listen 443;\n    ssl on;\n    ssl_certificate /etc/nginx/conf.d/server.crt;\n    ssl_certificate_key /etc/nginx/conf.d/server.key;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.php index.html index.htm;\n    }\n\n}\n</code></pre>\n","excerpt":"","more":"<h3 id=\"nginx-私有证书生成\"><a href=\"#nginx-私有证书生成\" class=\"headerlink\" title=\"nginx 私有证书生成\"></a>nginx 私有证书生成</h3><pre><code class=\"bash\">$ <span class=\"built_in\">cd</span> /etc/nginx/conf.d\n$ openssl genrsa -des3 -out server.key 1024\n$ openssl req -new -key server.key -out server.csr\n$ cp server.key server.key.org\n$ openssl rsa -in server.key.org -out server.key\n$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n</code></pre>\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><pre><code class=\"conf\">server {\n    server_name ss.shgt.com;\n    listen 443;\n    ssl on;\n    ssl_certificate /etc/nginx/conf.d/server.crt;\n    ssl_certificate_key /etc/nginx/conf.d/server.key;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.php index.html index.htm;\n    }\n\n}\n</code></pre>\n"},{"title":"rabbitmq_install","date":"2016-12-19T08:55:38.000Z","_content":"\n### 一、安装：\n```bash\nrpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm\nyum clean all\nyum install erlang\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n yum install rabbitmq-server-3.6.6-1.noarch.rpm\nyum list |grep rabbit\nyum install rabbitmq-server.noarch \nsystemctl enable rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\n\n```   \n\n### 二、配置 添加user和vhost：\n```bash\nrabbitmqctl add_vhost apis\nrabbitmqctl add_vhost search\nrabbitmqctl add_user shgt password\nrabbitmqctl  set_permissions  -p  apis  shgt  ConfP  WriteP  ReadP\nrabbitmqctl  set_permissions -p apis  shgt '.*' '.*' '.*'\nrabbitmqctl  set_permissions -p search  shgt '.*' '.*' '.*'\nrabbitmqctl list_user_permissions shgt\n\n```   \n\n### 三、设置 web管理帐号：\n```bash\n/usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management \nsystemctl stop rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\nrabbitmqctl add_user web_admin web_admin_123123\nrabbitmqctl  set_user_tags  web_admin  monitoring\nrabbitmqctl  set_user_tags  shgt  monitoring\nrabbitmqctl list_user_permissions shgt\nrabbitmqctl list_permissions -p apis\nrabbitmqctl add_user jobs password\n\n```   \n","source":"_posts/rabbitmq-install.md","raw":"---\ntitle: rabbitmq_install\ndate: 2016-12-19 16:55:38\ntags:\n - 技术\ncategories: [[linux,数据库,运维]]\n---\n\n### 一、安装：\n```bash\nrpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm\nyum clean all\nyum install erlang\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n yum install rabbitmq-server-3.6.6-1.noarch.rpm\nyum list |grep rabbit\nyum install rabbitmq-server.noarch \nsystemctl enable rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\n\n```   \n\n### 二、配置 添加user和vhost：\n```bash\nrabbitmqctl add_vhost apis\nrabbitmqctl add_vhost search\nrabbitmqctl add_user shgt password\nrabbitmqctl  set_permissions  -p  apis  shgt  ConfP  WriteP  ReadP\nrabbitmqctl  set_permissions -p apis  shgt '.*' '.*' '.*'\nrabbitmqctl  set_permissions -p search  shgt '.*' '.*' '.*'\nrabbitmqctl list_user_permissions shgt\n\n```   \n\n### 三、设置 web管理帐号：\n```bash\n/usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management \nsystemctl stop rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\nrabbitmqctl add_user web_admin web_admin_123123\nrabbitmqctl  set_user_tags  web_admin  monitoring\nrabbitmqctl  set_user_tags  shgt  monitoring\nrabbitmqctl list_user_permissions shgt\nrabbitmqctl list_permissions -p apis\nrabbitmqctl add_user jobs password\n\n```   \n","slug":"rabbitmq-install","published":1,"updated":"2016-12-19T09:53:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1v000dopulp8365l8w","content":"<h3 id=\"一、安装：\"><a href=\"#一、安装：\" class=\"headerlink\" title=\"一、安装：\"></a>一、安装：</h3><pre><code class=\"bash\">rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm\nyum clean all\nyum install erlang\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n yum install rabbitmq-server-3.6.6-1.noarch.rpm\nyum list |grep rabbit\nyum install rabbitmq-server.noarch \nsystemctl <span class=\"built_in\">enable</span> rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\n</code></pre>\n<h3 id=\"二、配置-添加user和vhost：\"><a href=\"#二、配置-添加user和vhost：\" class=\"headerlink\" title=\"二、配置 添加user和vhost：\"></a>二、配置 添加user和vhost：</h3><pre><code class=\"bash\">rabbitmqctl add_vhost apis\nrabbitmqctl add_vhost search\nrabbitmqctl add_user shgt password\nrabbitmqctl  set_permissions  -p  apis  shgt  ConfP  WriteP  ReadP\nrabbitmqctl  set_permissions -p apis  shgt <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span>\nrabbitmqctl  set_permissions -p search  shgt <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span>\nrabbitmqctl list_user_permissions shgt\n</code></pre>\n<h3 id=\"三、设置-web管理帐号：\"><a href=\"#三、设置-web管理帐号：\" class=\"headerlink\" title=\"三、设置 web管理帐号：\"></a>三、设置 web管理帐号：</h3><pre><code class=\"bash\">/usr/lib/rabbitmq/bin/rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management \nsystemctl stop rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\nrabbitmqctl add_user web_admin web_admin_123123\nrabbitmqctl  set_user_tags  web_admin  monitoring\nrabbitmqctl  set_user_tags  shgt  monitoring\nrabbitmqctl list_user_permissions shgt\nrabbitmqctl list_permissions -p apis\nrabbitmqctl add_user <span class=\"built_in\">jobs</span> password\n</code></pre>\n","excerpt":"","more":"<h3 id=\"一、安装：\"><a href=\"#一、安装：\" class=\"headerlink\" title=\"一、安装：\"></a>一、安装：</h3><pre><code class=\"bash\">rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm\nyum clean all\nyum install erlang\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n yum install rabbitmq-server-3.6.6-1.noarch.rpm\nyum list |grep rabbit\nyum install rabbitmq-server.noarch \nsystemctl <span class=\"built_in\">enable</span> rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\n</code></pre>\n<h3 id=\"二、配置-添加user和vhost：\"><a href=\"#二、配置-添加user和vhost：\" class=\"headerlink\" title=\"二、配置 添加user和vhost：\"></a>二、配置 添加user和vhost：</h3><pre><code class=\"bash\">rabbitmqctl add_vhost apis\nrabbitmqctl add_vhost search\nrabbitmqctl add_user shgt password\nrabbitmqctl  set_permissions  -p  apis  shgt  ConfP  WriteP  ReadP\nrabbitmqctl  set_permissions -p apis  shgt <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span>\nrabbitmqctl  set_permissions -p search  shgt <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span> <span class=\"string\">'.*'</span>\nrabbitmqctl list_user_permissions shgt\n</code></pre>\n<h3 id=\"三、设置-web管理帐号：\"><a href=\"#三、设置-web管理帐号：\" class=\"headerlink\" title=\"三、设置 web管理帐号：\"></a>三、设置 web管理帐号：</h3><pre><code class=\"bash\">/usr/lib/rabbitmq/bin/rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management \nsystemctl stop rabbitmq-server\nsystemctl start rabbitmq-server\nsystemctl status rabbitmq-server\nrabbitmqctl add_user web_admin web_admin_123123\nrabbitmqctl  set_user_tags  web_admin  monitoring\nrabbitmqctl  set_user_tags  shgt  monitoring\nrabbitmqctl list_user_permissions shgt\nrabbitmqctl list_permissions -p apis\nrabbitmqctl add_user <span class=\"built_in\">jobs</span> password\n</code></pre>\n"},{"title":"openresty","date":"2016-12-10T02:43:27.000Z","_content":"","source":"_posts/openresty.md","raw":"---\ntitle: openresty\ndate: 2016-12-10 10:43:27\ntags:\n---\n","slug":"openresty","published":1,"updated":"2016-12-10T02:43:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd1z000hopulhwuz5203","content":"","excerpt":"","more":""},{"title":"packetbeat","date":"2016-12-07T07:50:18.000Z","_content":"\n### 安装：\n[安装方法地址1.3](https://www.elastic.co/guide/en/beats/packetbeat/1.3/packetbeat-installation.html)\n```bash\n$  sudo yum install libpcap\n$  curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat-1.3.1-x86_64.rpm\n$  sudo rpm -vi packetbeat-1.3.1-x86_64.rpm\n```   \n### 配置：\n* 配置文件 vim /etc/packetbeat/packetbeat.yml\n\n```bash\n  mysql:\n    # Configure the ports where to listen for MySQL traffic. You can disable\n    # the MySQL protocol by commenting out the list of ports.\n    ports: [3306]\n\noutput:\n\n  ### Elasticsearch as output\n  elasticsearch:\n    # Array of hosts to connect to.\n    # Scheme and port can be left out and will be set to the default (http and 9200)\n    # In case you specify and additional path, the scheme is required: http://localhost:9200/path\n    # IPv6 addresses should always be defined as: https://[2001:db8::1]:9200\n    hosts: [\"10.57.117.104:9200\",\"10.57.112.126:9200\"]\n```   \n","source":"_posts/packetbeat.md","raw":"---\ntitle: packetbeat\ndate: 2016-12-07 15:50:18\ntags:\n- 技术\ncategories: [linux,数据库,开发]\n---\n\n### 安装：\n[安装方法地址1.3](https://www.elastic.co/guide/en/beats/packetbeat/1.3/packetbeat-installation.html)\n```bash\n$  sudo yum install libpcap\n$  curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat-1.3.1-x86_64.rpm\n$  sudo rpm -vi packetbeat-1.3.1-x86_64.rpm\n```   \n### 配置：\n* 配置文件 vim /etc/packetbeat/packetbeat.yml\n\n```bash\n  mysql:\n    # Configure the ports where to listen for MySQL traffic. You can disable\n    # the MySQL protocol by commenting out the list of ports.\n    ports: [3306]\n\noutput:\n\n  ### Elasticsearch as output\n  elasticsearch:\n    # Array of hosts to connect to.\n    # Scheme and port can be left out and will be set to the default (http and 9200)\n    # In case you specify and additional path, the scheme is required: http://localhost:9200/path\n    # IPv6 addresses should always be defined as: https://[2001:db8::1]:9200\n    hosts: [\"10.57.117.104:9200\",\"10.57.112.126:9200\"]\n```   \n","slug":"packetbeat","published":1,"updated":"2016-12-07T08:24:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd21000jopulbn53ilgc","content":"<h3 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h3><p><a href=\"https://www.elastic.co/guide/en/beats/packetbeat/1.3/packetbeat-installation.html\" target=\"_blank\" rel=\"external\">安装方法地址1.3</a></p>\n<pre><code class=\"bash\">$  sudo yum install libpcap\n$  curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat-1.3.1-x86_64.rpm\n$  sudo rpm -vi packetbeat-1.3.1-x86_64.rpm\n</code></pre>\n<h3 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h3><ul>\n<li>配置文件 vim /etc/packetbeat/packetbeat.yml</li>\n</ul>\n<pre><code class=\"bash\">  mysql:\n    <span class=\"comment\"># Configure the ports where to listen for MySQL traffic. You can disable</span>\n    <span class=\"comment\"># the MySQL protocol by commenting out the list of ports.</span>\n    ports: [3306]\n\noutput:\n\n  <span class=\"comment\">### Elasticsearch as output</span>\n  elasticsearch:\n    <span class=\"comment\"># Array of hosts to connect to.</span>\n    <span class=\"comment\"># Scheme and port can be left out and will be set to the default (http and 9200)</span>\n    <span class=\"comment\"># In case you specify and additional path, the scheme is required: http://localhost:9200/path</span>\n    <span class=\"comment\"># IPv6 addresses should always be defined as: https://[2001:db8::1]:9200</span>\n    hosts: [<span class=\"string\">\"10.57.117.104:9200\"</span>,<span class=\"string\">\"10.57.112.126:9200\"</span>]\n</code></pre>\n","excerpt":"","more":"<h3 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h3><p><a href=\"https://www.elastic.co/guide/en/beats/packetbeat/1.3/packetbeat-installation.html\">安装方法地址1.3</a></p>\n<pre><code class=\"bash\">$  sudo yum install libpcap\n$  curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat-1.3.1-x86_64.rpm\n$  sudo rpm -vi packetbeat-1.3.1-x86_64.rpm\n</code></pre>\n<h3 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h3><ul>\n<li>配置文件 vim /etc/packetbeat/packetbeat.yml</li>\n</ul>\n<pre><code class=\"bash\">  mysql:\n    <span class=\"comment\"># Configure the ports where to listen for MySQL traffic. You can disable</span>\n    <span class=\"comment\"># the MySQL protocol by commenting out the list of ports.</span>\n    ports: [3306]\n\noutput:\n\n  <span class=\"comment\">### Elasticsearch as output</span>\n  elasticsearch:\n    <span class=\"comment\"># Array of hosts to connect to.</span>\n    <span class=\"comment\"># Scheme and port can be left out and will be set to the default (http and 9200)</span>\n    <span class=\"comment\"># In case you specify and additional path, the scheme is required: http://localhost:9200/path</span>\n    <span class=\"comment\"># IPv6 addresses should always be defined as: https://[2001:db8::1]:9200</span>\n    hosts: [<span class=\"string\">\"10.57.117.104:9200\"</span>,<span class=\"string\">\"10.57.112.126:9200\"</span>]\n</code></pre>\n"},{"title":"数据库迁移","date":"2016-12-04T12:44:34.000Z","_content":"\n## mysql和mongo数据\n\n### 1 mysql数据库的操作\n1.1 mysql数据库 dump\n\n``` bash\n$ mysqldump  -h 地址 -u用户名 -p密码 --default-character-set=utf8   数据库(dbname)  > bak.sql\n```\n\n1.2 mysql 数据恢复\n\n```bash\n$ mysql -h 数据库地址 -u 用户名 -p密码\n$ use  dbname\n$ source   bak.sql\n```\n\n1.3 mysql 数据的 \n如果是同一个数据库服务器，从一个库导数据到另外一个，\n创建一个用户拥有两个数据库的权限（被导数据库只读即可，写入的数据库需要写权限）\n\n```bash\n$ mysql -h 数据库地址 -u 用户名 -p密码\n$ REPLACE INTO `de_desdination`.`db_category` SELECT * FROM  `db_source`.`db_category`;\n```\n\n\n\n### 2 mongo数据库迁移\n\n2.1 备份数据库：\n```bash\n$ mongodump -u用户名 -p密码 -d dbname -o 备份路径\n```\n\n2.2 \n```bash\n$ /opt/mongodb/bin/mongorestore  -h 127.0.0.1    -d 数据库名 备份文件夹/\n```\n\n\n","source":"_posts/数据库迁移.md","raw":"---\ntitle: 数据库迁移\ndate: 2016-12-04 20:44:34\ntags:\n- 技术\n- 随笔\ncategories: [linux,数据库,运维]\n---\n\n## mysql和mongo数据\n\n### 1 mysql数据库的操作\n1.1 mysql数据库 dump\n\n``` bash\n$ mysqldump  -h 地址 -u用户名 -p密码 --default-character-set=utf8   数据库(dbname)  > bak.sql\n```\n\n1.2 mysql 数据恢复\n\n```bash\n$ mysql -h 数据库地址 -u 用户名 -p密码\n$ use  dbname\n$ source   bak.sql\n```\n\n1.3 mysql 数据的 \n如果是同一个数据库服务器，从一个库导数据到另外一个，\n创建一个用户拥有两个数据库的权限（被导数据库只读即可，写入的数据库需要写权限）\n\n```bash\n$ mysql -h 数据库地址 -u 用户名 -p密码\n$ REPLACE INTO `de_desdination`.`db_category` SELECT * FROM  `db_source`.`db_category`;\n```\n\n\n\n### 2 mongo数据库迁移\n\n2.1 备份数据库：\n```bash\n$ mongodump -u用户名 -p密码 -d dbname -o 备份路径\n```\n\n2.2 \n```bash\n$ /opt/mongodb/bin/mongorestore  -h 127.0.0.1    -d 数据库名 备份文件夹/\n```\n\n\n","slug":"数据库迁移","published":1,"updated":"2016-12-04T13:42:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvxqd24000nopul95lg1cbv","content":"<h2 id=\"mysql和mongo数据\"><a href=\"#mysql和mongo数据\" class=\"headerlink\" title=\"mysql和mongo数据\"></a>mysql和mongo数据</h2><h3 id=\"1-mysql数据库的操作\"><a href=\"#1-mysql数据库的操作\" class=\"headerlink\" title=\"1 mysql数据库的操作\"></a>1 mysql数据库的操作</h3><p>1.1 mysql数据库 dump</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysqldump  -h 地址 -u用户名 -p密码 --default-character-set=utf8   数据库(dbname)  &gt; bak.sql</div></pre></td></tr></table></figure>\n<p>1.2 mysql 数据恢复</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -h 数据库地址 -u 用户名 -p密码</div><div class=\"line\">$ use  dbname</div><div class=\"line\">$ <span class=\"built_in\">source</span>   bak.sql</div></pre></td></tr></table></figure>\n<p>1.3 mysql 数据的<br>如果是同一个数据库服务器，从一个库导数据到另外一个，<br>创建一个用户拥有两个数据库的权限（被导数据库只读即可，写入的数据库需要写权限）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -h 数据库地址 -u 用户名 -p密码</div><div class=\"line\">$ REPLACE INTO `de_desdination`.`db_category` SELECT * FROM  `db_source`.`db_category`;</div></pre></td></tr></table></figure>\n<h3 id=\"2-mongo数据库迁移\"><a href=\"#2-mongo数据库迁移\" class=\"headerlink\" title=\"2 mongo数据库迁移\"></a>2 mongo数据库迁移</h3><p>2.1 备份数据库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongodump -u用户名 -p密码 <span class=\"_\">-d</span> dbname -o 备份路径</div></pre></td></tr></table></figure></p>\n<p>2.2<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /opt/mongodb/bin/mongorestore  -h 127.0.0.1    <span class=\"_\">-d</span> 数据库名 备份文件夹/</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"mysql和mongo数据\"><a href=\"#mysql和mongo数据\" class=\"headerlink\" title=\"mysql和mongo数据\"></a>mysql和mongo数据</h2><h3 id=\"1-mysql数据库的操作\"><a href=\"#1-mysql数据库的操作\" class=\"headerlink\" title=\"1 mysql数据库的操作\"></a>1 mysql数据库的操作</h3><p>1.1 mysql数据库 dump</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysqldump  -h 地址 -u用户名 -p密码 --default-character-set=utf8   数据库(dbname)  &gt; bak.sql</div></pre></td></tr></table></figure>\n<p>1.2 mysql 数据恢复</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -h 数据库地址 -u 用户名 -p密码</div><div class=\"line\">$ use  dbname</div><div class=\"line\">$ <span class=\"built_in\">source</span>   bak.sql</div></pre></td></tr></table></figure>\n<p>1.3 mysql 数据的<br>如果是同一个数据库服务器，从一个库导数据到另外一个，<br>创建一个用户拥有两个数据库的权限（被导数据库只读即可，写入的数据库需要写权限）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -h 数据库地址 -u 用户名 -p密码</div><div class=\"line\">$ REPLACE INTO `de_desdination`.`db_category` SELECT * FROM  `db_source`.`db_category`;</div></pre></td></tr></table></figure>\n<h3 id=\"2-mongo数据库迁移\"><a href=\"#2-mongo数据库迁移\" class=\"headerlink\" title=\"2 mongo数据库迁移\"></a>2 mongo数据库迁移</h3><p>2.1 备份数据库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongodump -u用户名 -p密码 <span class=\"_\">-d</span> dbname -o 备份路径</div></pre></td></tr></table></figure></p>\n<p>2.2<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /opt/mongodb/bin/mongorestore  -h 127.0.0.1    <span class=\"_\">-d</span> 数据库名 备份文件夹/</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwvxqd1t000bopulz9kzaxt0","category_id":"ciwvxqd2a000topul2udutw5m","_id":"ciwvxqd2b000yopulok2e8apk"},{"post_id":"ciwvxqd1v000dopulp8365l8w","category_id":"ciwvxqd2a000topul2udutw5m","_id":"ciwvxqd2d0011opuloltkruzi"},{"post_id":"ciwvxqd24000nopul95lg1cbv","category_id":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd2m0015opullsnaq190"},{"post_id":"ciwvxqd24000nopul95lg1cbv","category_id":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2o0017opultib9qhbl"},{"post_id":"ciwvxqd24000nopul95lg1cbv","category_id":"ciwvxqd2e0013opuln2dsf6vw","_id":"ciwvxqd2o0018opul7q0s52uq"},{"post_id":"ciwvxqd130000opulwfy257i8","category_id":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd2o001aopuljx6lo43a"},{"post_id":"ciwvxqd130000opulwfy257i8","category_id":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2p001bopuls8u3ytzk"},{"post_id":"ciwvxqd130000opulwfy257i8","category_id":"ciwvxqd2e0013opuln2dsf6vw","_id":"ciwvxqd2q001dopul1j2giqli"},{"post_id":"ciwvxqd1o0008opul1cg9vau9","category_id":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd2q001eopulyheax19f"},{"post_id":"ciwvxqd1o0008opul1cg9vau9","category_id":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2r001gopulv54jfy6h"},{"post_id":"ciwvxqd1o0008opul1cg9vau9","category_id":"ciwvxqd2m0016opultngj4etz","_id":"ciwvxqd2r001hopuln28ivkdt"},{"post_id":"ciwvxqd1a0002opulgul8hxv4","category_id":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd2r001iopulhci1jcmg"},{"post_id":"ciwvxqd1a0002opulgul8hxv4","category_id":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2r001jopulz4mhrml4"},{"post_id":"ciwvxqd1a0002opulgul8hxv4","category_id":"ciwvxqd2m0016opultngj4etz","_id":"ciwvxqd2r001kopul7ji2xv9e"},{"post_id":"ciwvxqd1k0006opuloqj7ucyv","category_id":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd2r001lopuldbwul278"},{"post_id":"ciwvxqd1k0006opuloqj7ucyv","category_id":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2r001mopul3oq23aw0"},{"post_id":"ciwvxqd1k0006opuloqj7ucyv","category_id":"ciwvxqd2m0016opultngj4etz","_id":"ciwvxqd2s001nopul8wd397z7"},{"post_id":"ciwvxqd21000jopulbn53ilgc","category_id":"ciwvxqd1e0004opulvvlzh50a","_id":"ciwvxqd2t001oopul6zkrprdb"},{"post_id":"ciwvxqd21000jopulbn53ilgc","category_id":"ciwvxqd22000kopulxliul360","_id":"ciwvxqd2u001populkj8ixnnk"},{"post_id":"ciwvxqd21000jopulbn53ilgc","category_id":"ciwvxqd2m0016opultngj4etz","_id":"ciwvxqd2v001qopul3wlwnudl"}],"PostTag":[{"post_id":"ciwvxqd1o0008opul1cg9vau9","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd1v000copulvytpesxc"},{"post_id":"ciwvxqd1t000bopulz9kzaxt0","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd1z000gopulhjzmv581"},{"post_id":"ciwvxqd130000opulwfy257i8","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd20000iopulmhuaqc83"},{"post_id":"ciwvxqd130000opulwfy257i8","tag_id":"ciwvxqd1q000aopulv4i03hg3","_id":"ciwvxqd24000mopuliymjob3x"},{"post_id":"ciwvxqd1v000dopulp8365l8w","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd26000oopulv6wbtk88"},{"post_id":"ciwvxqd1a0002opulgul8hxv4","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd2a000ropull7lnjxtq"},{"post_id":"ciwvxqd21000jopulbn53ilgc","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd2a000sopulxi76enwq"},{"post_id":"ciwvxqd1k0006opuloqj7ucyv","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd2a000uopulutdl1mgq"},{"post_id":"ciwvxqd24000nopul95lg1cbv","tag_id":"ciwvxqd1j0005opul70jmkwc8","_id":"ciwvxqd2a000vopuln58ah8j6"},{"post_id":"ciwvxqd24000nopul95lg1cbv","tag_id":"ciwvxqd29000qopul4dthvezl","_id":"ciwvxqd2b000xopul58btbvzm"}],"Tag":[{"name":"技术","_id":"ciwvxqd1j0005opul70jmkwc8"},{"name":"运维","_id":"ciwvxqd1q000aopulv4i03hg3"},{"name":"随笔","_id":"ciwvxqd29000qopul4dthvezl"}]}}